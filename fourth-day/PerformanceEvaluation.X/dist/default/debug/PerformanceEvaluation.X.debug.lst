

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Feb 25 16:40:22 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28  0000                     
    29                           ; Version 2.10
    30                           ; Generated 31/07/2019 GMT
    31                           ; 
    32                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4520 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	smallconst
    65  000600                     __psmallconst:
    66                           	opt callstack 0
    67  000600  00                 	db	0
    68  000601                     sin@coeff_a:
    69                           	opt callstack 0
    70  000601  F4                 	db	244
    71  000602  4A                 	db	74
    72  000603  48                 	db	72
    73  000604  95                 	db	149
    74  000605  95                 	db	149
    75  000606  C7                 	db	199
    76  000607  C1                 	db	193
    77  000608  DC                 	db	220
    78  000609  45                 	db	69
    79  00060A  DC                 	db	220
    80  00060B  6D                 	db	109
    81  00060C  C3                 	db	195
    82  00060D  B3                 	db	179
    83  00060E  33                 	db	51
    84  00060F  40                 	db	64
    85  000610                     __end_ofsin@coeff_a:
    86                           	opt callstack 0
    87  000610                     sin@coeff_b:
    88                           	opt callstack 0
    89  000610  34                 	db	52
    90  000611  01                 	db	1
    91  000612  48                 	db	72
    92  000613  9D                 	db	157
    93  000614  B0                 	db	176
    94  000615  45                 	db	69
    95  000616  00                 	db	0
    96  000617  DA                 	db	218
    97  000618  42                 	db	66
    98  000619  00                 	db	0
    99  00061A  80                 	db	128
   100  00061B  3F                 	db	63
   101  00061C                     __end_ofsin@coeff_b:
   102                           	opt callstack 0
   103  00061C  00                 	db	0	; dummy byte at the end
   104  0000                     
   105                           ; #config settings
   106                           
   107                           	psect	cinit
   108  001212                     __pcinit:
   109                           	opt callstack 0
   110  001212                     start_initialization:
   111                           	opt callstack 0
   112  001212                     __initialization:
   113                           	opt callstack 0
   114                           
   115                           ; Clear objects allocated to COMRAM (2 bytes)
   116  001212  6A5D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   117  001214  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   118  001216                     end_of_initialization:
   119                           	opt callstack 0
   120  001216                     __end_of__initialization:
   121                           	opt callstack 0
   122  001216  0E00               	movlw	low (__Lsmallconst shr (0+16))
   123  001218  6EF8               	movwf	tblptru,c
   124  00121A  0E06               	movlw	high __Lsmallconst
   125  00121C  6EF7               	movwf	tblptrh,c
   126  00121E  0100               	movlb	0
   127  001220  EF12  F009         	goto	_main	;jump to C main() function
   128                           
   129                           	psect	bssCOMRAM
   130  00005C                     __pbssCOMRAM:
   131                           	opt callstack 0
   132  00005C                     _errno:
   133                           	opt callstack 0
   134  00005C                     	ds	2
   135                           
   136                           	psect	cstackCOMRAM
   137  000001                     __pcstackCOMRAM:
   138                           	opt callstack 0
   139  000001                     ?___ftpack:
   140                           	opt callstack 0
   141  000001                     ?___ftneg:
   142                           	opt callstack 0
   143  000001                     ?___fttol:
   144                           	opt callstack 0
   145  000001                     ___ftpack@arg:
   146                           	opt callstack 0
   147  000001                     ___ftge@ff1:
   148                           	opt callstack 0
   149  000001                     ___ftneg@f1:
   150                           	opt callstack 0
   151  000001                     ___fttol@f1:
   152                           	opt callstack 0
   153  000001                     frexp@value:
   154                           	opt callstack 0
   155                           
   156                           ; 3 bytes @ 0x0
   157  000001                     	ds	3
   158  000004                     ___ftpack@exp:
   159                           	opt callstack 0
   160  000004                     frexp@eptr:
   161                           	opt callstack 0
   162  000004                     ___ftge@ff2:
   163                           	opt callstack 0
   164                           
   165                           ; 3 bytes @ 0x3
   166  000004                     	ds	1
   167  000005                     ??_frexp:
   168  000005                     ??___fttol:
   169  000005                     ___ftpack@sign:
   170                           	opt callstack 0
   171                           
   172                           ; 1 bytes @ 0x4
   173  000005                     	ds	1
   174  000006                     ??___ftpack:
   175                           
   176                           ; 1 bytes @ 0x5
   177  000006                     	ds	1
   178  000007                     ??___ftge:
   179                           
   180                           ; 1 bytes @ 0x6
   181  000007                     	ds	2
   182  000009                     ?___ftmul:
   183                           	opt callstack 0
   184  000009                     ___ftmul@f1:
   185                           	opt callstack 0
   186                           
   187                           ; 3 bytes @ 0x8
   188  000009                     	ds	1
   189  00000A                     ___fttol@sign1:
   190                           	opt callstack 0
   191                           
   192                           ; 1 bytes @ 0x9
   193  00000A                     	ds	1
   194  00000B                     ___fttol@lval:
   195                           	opt callstack 0
   196                           
   197                           ; 4 bytes @ 0xA
   198  00000B                     	ds	1
   199  00000C                     ___ftmul@f2:
   200                           	opt callstack 0
   201                           
   202                           ; 3 bytes @ 0xB
   203  00000C                     	ds	3
   204  00000F                     ??___ftmul:
   205  00000F                     ___fttol@exp1:
   206                           	opt callstack 0
   207                           
   208                           ; 1 bytes @ 0xE
   209  00000F                     	ds	1
   210  000010                     ?___altoft:
   211                           	opt callstack 0
   212  000010                     ___altoft@c:
   213                           	opt callstack 0
   214                           
   215                           ; 4 bytes @ 0xF
   216  000010                     	ds	2
   217  000012                     ___ftmul@exp:
   218                           	opt callstack 0
   219                           
   220                           ; 1 bytes @ 0x11
   221  000012                     	ds	1
   222  000013                     ___ftmul@f3_as_product:
   223                           	opt callstack 0
   224                           
   225                           ; 3 bytes @ 0x12
   226  000013                     	ds	1
   227  000014                     ??___altoft:
   228                           
   229                           ; 1 bytes @ 0x13
   230  000014                     	ds	2
   231  000016                     ___ftmul@cntr:
   232                           	opt callstack 0
   233                           
   234                           ; 1 bytes @ 0x15
   235  000016                     	ds	1
   236  000017                     ___ftmul@sign:
   237                           	opt callstack 0
   238                           
   239                           ; 1 bytes @ 0x16
   240  000017                     	ds	1
   241  000018                     ?___ftadd:
   242                           	opt callstack 0
   243  000018                     ___altoft@exp:
   244                           	opt callstack 0
   245  000018                     ___ftadd@f1:
   246                           	opt callstack 0
   247                           
   248                           ; 3 bytes @ 0x17
   249  000018                     	ds	1
   250  000019                     ___altoft@sign:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x18
   254  000019                     	ds	2
   255  00001B                     ___ftadd@f2:
   256                           	opt callstack 0
   257                           
   258                           ; 3 bytes @ 0x1A
   259  00001B                     	ds	3
   260  00001E                     ??___ftadd:
   261                           
   262                           ; 1 bytes @ 0x1D
   263  00001E                     	ds	3
   264  000021                     ___ftadd@sign:
   265                           	opt callstack 0
   266                           
   267                           ; 1 bytes @ 0x20
   268  000021                     	ds	1
   269  000022                     ___ftadd@exp2:
   270                           	opt callstack 0
   271                           
   272                           ; 1 bytes @ 0x21
   273  000022                     	ds	1
   274  000023                     ___ftadd@exp1:
   275                           	opt callstack 0
   276                           
   277                           ; 1 bytes @ 0x22
   278  000023                     	ds	1
   279  000024                     ?_floor:
   280                           	opt callstack 0
   281  000024                     ?_eval_poly:
   282                           	opt callstack 0
   283  000024                     eval_poly@x:
   284                           	opt callstack 0
   285  000024                     floor@x:
   286                           	opt callstack 0
   287                           
   288                           ; 3 bytes @ 0x23
   289  000024                     	ds	3
   290  000027                     eval_poly@d:
   291                           	opt callstack 0
   292  000027                     floor@i:
   293                           	opt callstack 0
   294                           
   295                           ; 3 bytes @ 0x26
   296  000027                     	ds	1
   297  000028                     eval_poly@n:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0x27
   301  000028                     	ds	2
   302  00002A                     ??_eval_poly:
   303  00002A                     floor@expon:
   304                           	opt callstack 0
   305                           
   306                           ; 2 bytes @ 0x29
   307  00002A                     	ds	1
   308  00002B                     eval_poly@res:
   309                           	opt callstack 0
   310                           
   311                           ; 3 bytes @ 0x2A
   312  00002B                     	ds	1
   313  00002C                     ?___ftsub:
   314                           	opt callstack 0
   315  00002C                     ___ftsub@f1:
   316                           	opt callstack 0
   317                           
   318                           ; 3 bytes @ 0x2B
   319  00002C                     	ds	2
   320  00002E                     ?___ftdiv:
   321                           	opt callstack 0
   322  00002E                     ___ftdiv@f1:
   323                           	opt callstack 0
   324                           
   325                           ; 3 bytes @ 0x2D
   326  00002E                     	ds	1
   327  00002F                     ___ftsub@f2:
   328                           	opt callstack 0
   329                           
   330                           ; 3 bytes @ 0x2E
   331  00002F                     	ds	2
   332  000031                     ___ftdiv@f2:
   333                           	opt callstack 0
   334                           
   335                           ; 3 bytes @ 0x30
   336  000031                     	ds	1
   337  000032                     
   338                           ; 1 bytes @ 0x31
   339  000032                     	ds	2
   340  000034                     ??___ftdiv:
   341                           
   342                           ; 1 bytes @ 0x33
   343  000034                     	ds	3
   344  000037                     ___ftdiv@cntr:
   345                           	opt callstack 0
   346                           
   347                           ; 1 bytes @ 0x36
   348  000037                     	ds	1
   349  000038                     ___ftdiv@f3:
   350                           	opt callstack 0
   351                           
   352                           ; 3 bytes @ 0x37
   353  000038                     	ds	3
   354  00003B                     ___ftdiv@exp:
   355                           	opt callstack 0
   356                           
   357                           ; 1 bytes @ 0x3A
   358  00003B                     	ds	1
   359  00003C                     ___ftdiv@sign:
   360                           	opt callstack 0
   361                           
   362                           ; 1 bytes @ 0x3B
   363  00003C                     	ds	1
   364  00003D                     ?_sin:
   365                           	opt callstack 0
   366  00003D                     sin@f:
   367                           	opt callstack 0
   368                           
   369                           ; 3 bytes @ 0x3C
   370  00003D                     	ds	3
   371  000040                     sin@y:
   372                           	opt callstack 0
   373                           
   374                           ; 3 bytes @ 0x3F
   375  000040                     	ds	3
   376  000043                     _sin$739:
   377                           	opt callstack 0
   378                           
   379                           ; 3 bytes @ 0x42
   380  000043                     	ds	3
   381  000046                     sin@x2:
   382                           	opt callstack 0
   383                           
   384                           ; 3 bytes @ 0x45
   385  000046                     	ds	3
   386  000049                     sin@sgn:
   387                           	opt callstack 0
   388                           
   389                           ; 1 bytes @ 0x48
   390  000049                     	ds	1
   391  00004A                     ?_cos:
   392                           	opt callstack 0
   393  00004A                     cos@f:
   394                           	opt callstack 0
   395                           
   396                           ; 3 bytes @ 0x49
   397  00004A                     	ds	3
   398  00004D                     _cos$738:
   399                           	opt callstack 0
   400                           
   401                           ; 3 bytes @ 0x4C
   402  00004D                     	ds	3
   403  000050                     ?_tan:
   404                           	opt callstack 0
   405  000050                     tan@x:
   406                           	opt callstack 0
   407                           
   408                           ; 3 bytes @ 0x4F
   409  000050                     	ds	3
   410  000053                     _tan$740:
   411                           	opt callstack 0
   412                           
   413                           ; 3 bytes @ 0x52
   414  000053                     	ds	3
   415  000056                     _tan$741:
   416                           	opt callstack 0
   417                           
   418                           ; 3 bytes @ 0x55
   419  000056                     	ds	3
   420  000059                     
   421                           ; 1 bytes @ 0x58
   422  000059                     	ds	3
   423  00005C                     
   424                           ; 1 bytes @ 0x5B
   425 ;;
   426 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   427 ;;
   428 ;; *************** function _main *****************
   429 ;; Defined at:
   430 ;;		line 13 in file "main.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : 0/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   444 ;;      Params:         0       0       0       0       0       0       0
   445 ;;      Locals:         0       0       0       0       0       0       0
   446 ;;      Temps:          0       0       0       0       0       0       0
   447 ;;      Totals:         0       0       0       0       0       0       0
   448 ;;Total ram usage:        0 bytes
   449 ;; Hardware stack levels required when called:    7
   450 ;; This function calls:
   451 ;;		_trigonometry
   452 ;; This function is called by:
   453 ;;		Startup code after reset
   454 ;; This function uses a non-reentrant model
   455 ;;
   456                           
   457                           	psect	text0
   458  001224                     __ptext0:
   459                           	opt callstack 0
   460  001224                     _main:
   461                           	opt callstack 24
   462                           
   463                           ;main.c: 17: trigonometry();
   464                           
   465                           ;incstack = 0
   466  001224  EC1B  F007         	call	_trigonometry	;wreg free
   467  001228  EF00  F000         	goto	start
   468  00122C                     __end_of_main:
   469                           	opt callstack 0
   470                           
   471 ;; *************** function _trigonometry *****************
   472 ;; Defined at:
   473 ;;		line 17 in file "Tests.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  v               3    0        float 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   487 ;;      Params:         0       0       0       0       0       0       0
   488 ;;      Locals:         3       0       0       0       0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0
   490 ;;      Totals:         3       0       0       0       0       0       0
   491 ;;Total ram usage:        3 bytes
   492 ;; Hardware stack levels used:    1
   493 ;; Hardware stack levels required when called:    6
   494 ;; This function calls:
   495 ;;		_cos
   496 ;;		_sin
   497 ;;		_tan
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text1
   504  000E36                     __ptext1:
   505                           	opt callstack 0
   506  000E36                     _trigonometry:
   507                           	opt callstack 24
   508                           
   509                           ;Tests.c: 18: float v;;Tests.c: 19: __nop();
   510                           
   511                           ;incstack = 0
   512  000E36  F000               	nop	
   513  000E38  0E00               	movlw	0
   514  000E3A  6E3D               	movwf	sin@f^0,c
   515  000E3C  0E00               	movlw	0
   516  000E3E  6E3E               	movwf	(sin@f+1)^0,c
   517  000E40  0E00               	movlw	0
   518  000E42  6E3F               	movwf	(sin@f+2)^0,c
   519  000E44  EC0F  F003         	call	_sin	;wreg free
   520                           
   521                           ;Tests.c: 21: __nop();
   522  000E48  F000               	nop	
   523  000E4A  0E00               	movlw	0
   524  000E4C  6E3D               	movwf	sin@f^0,c
   525  000E4E  0E80               	movlw	128
   526  000E50  6E3E               	movwf	(sin@f+1)^0,c
   527  000E52  0E3F               	movlw	63
   528  000E54  6E3F               	movwf	(sin@f+2)^0,c
   529  000E56  EC0F  F003         	call	_sin	;wreg free
   530                           
   531                           ;Tests.c: 23: __nop();
   532  000E5A  F000               	nop	
   533  000E5C  0E10               	movlw	16
   534  000E5E  6E3D               	movwf	sin@f^0,c
   535  000E60  0EC9               	movlw	201
   536  000E62  6E3E               	movwf	(sin@f+1)^0,c
   537  000E64  0E3F               	movlw	63
   538  000E66  6E3F               	movwf	(sin@f+2)^0,c
   539  000E68  EC0F  F003         	call	_sin	;wreg free
   540                           
   541                           ;Tests.c: 25: __nop();
   542  000E6C  F000               	nop	
   543  000E6E  0E00               	movlw	0
   544  000E70  6E4A               	movwf	cos@f^0,c
   545  000E72  0E00               	movlw	0
   546  000E74  6E4B               	movwf	(cos@f+1)^0,c
   547  000E76  0E00               	movlw	0
   548  000E78  6E4C               	movwf	(cos@f+2)^0,c
   549  000E7A  ECB9  F007         	call	_cos	;wreg free
   550                           
   551                           ;Tests.c: 28: __nop();
   552  000E7E  F000               	nop	
   553  000E80  0E00               	movlw	0
   554  000E82  6E4A               	movwf	cos@f^0,c
   555  000E84  0E80               	movlw	128
   556  000E86  6E4B               	movwf	(cos@f+1)^0,c
   557  000E88  0E3F               	movlw	63
   558  000E8A  6E4C               	movwf	(cos@f+2)^0,c
   559  000E8C  ECB9  F007         	call	_cos	;wreg free
   560                           
   561                           ;Tests.c: 30: __nop();
   562  000E90  F000               	nop	
   563  000E92  0E10               	movlw	16
   564  000E94  6E4A               	movwf	cos@f^0,c
   565  000E96  0EC9               	movlw	201
   566  000E98  6E4B               	movwf	(cos@f+1)^0,c
   567  000E9A  0E3F               	movlw	63
   568  000E9C  6E4C               	movwf	(cos@f+2)^0,c
   569  000E9E  ECB9  F007         	call	_cos	;wreg free
   570                           
   571                           ;Tests.c: 32: __nop();
   572  000EA2  F000               	nop	
   573  000EA4  0E00               	movlw	0
   574  000EA6  6E50               	movwf	tan@x^0,c
   575  000EA8  0E00               	movlw	0
   576  000EAA  6E51               	movwf	(tan@x+1)^0,c
   577  000EAC  0E00               	movlw	0
   578  000EAE  6E52               	movwf	(tan@x+2)^0,c
   579  000EB0  ECA6  F008         	call	_tan	;wreg free
   580                           
   581                           ;Tests.c: 35: __nop();
   582  000EB4  F000               	nop	
   583  000EB6  0E00               	movlw	0
   584  000EB8  6E50               	movwf	tan@x^0,c
   585  000EBA  0E80               	movlw	128
   586  000EBC  6E51               	movwf	(tan@x+1)^0,c
   587  000EBE  0E3F               	movlw	63
   588  000EC0  6E52               	movwf	(tan@x+2)^0,c
   589  000EC2  ECA6  F008         	call	_tan	;wreg free
   590                           
   591                           ;Tests.c: 37: __nop();
   592  000EC6  F000               	nop	
   593  000EC8  0E10               	movlw	16
   594  000ECA  6E50               	movwf	tan@x^0,c
   595  000ECC  0EC9               	movlw	201
   596  000ECE  6E51               	movwf	(tan@x+1)^0,c
   597  000ED0  0E3F               	movlw	63
   598  000ED2  6E52               	movwf	(tan@x+2)^0,c
   599  000ED4  ECA6  F008         	call	_tan	;wreg free
   600                           
   601                           ;Tests.c: 39: __nop();
   602  000ED8  F000               	nop	
   603  000EDA  0012               	return		;funcret
   604  000EDC                     __end_of_trigonometry:
   605                           	opt callstack 0
   606                           
   607 ;; *************** function _tan *****************
   608 ;; Defined at:
   609 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\tan.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;  x               3   79[COMRAM] void 
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  3   79[COMRAM] void 
   616 ;; Registers used:
   617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   623 ;;      Params:         3       0       0       0       0       0       0
   624 ;;      Locals:         6       0       0       0       0       0       0
   625 ;;      Temps:          0       0       0       0       0       0       0
   626 ;;      Totals:         9       0       0       0       0       0       0
   627 ;;Total ram usage:        9 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    5
   630 ;; This function calls:
   631 ;;		___ftdiv
   632 ;;		_cos
   633 ;;		_sin
   634 ;; This function is called by:
   635 ;;		_trigonometry
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text2
   640  00114C                     __ptext2:
   641                           	opt callstack 0
   642  00114C                     _tan:
   643                           	opt callstack 24
   644                           
   645                           ;incstack = 0
   646  00114C  C050  F03D         	movff	tan@x,sin@f
   647  001150  C051  F03E         	movff	tan@x+1,sin@f+1
   648  001154  C052  F03F         	movff	tan@x+2,sin@f+2
   649  001158  EC0F  F003         	call	_sin	;wreg free
   650  00115C  C03D  F053         	movff	?_sin,_tan$740
   651  001160  C03E  F054         	movff	?_sin+1,_tan$740+1
   652  001164  C03F  F055         	movff	?_sin+2,_tan$740+2
   653  001168  C050  F04A         	movff	tan@x,cos@f
   654  00116C  C051  F04B         	movff	tan@x+1,cos@f+1
   655  001170  C052  F04C         	movff	tan@x+2,cos@f+2
   656  001174  ECB9  F007         	call	_cos	;wreg free
   657  001178  C04A  F056         	movff	?_cos,_tan$741
   658  00117C  C04B  F057         	movff	?_cos+1,_tan$741+1
   659  001180  C04C  F058         	movff	?_cos+2,_tan$741+2
   660  001184  C053  F02E         	movff	_tan$740,___ftdiv@f1
   661  001188  C054  F02F         	movff	_tan$740+1,___ftdiv@f1+1
   662  00118C  C055  F030         	movff	_tan$740+2,___ftdiv@f1+2
   663  001190  C056  F031         	movff	_tan$741,___ftdiv@f2
   664  001194  C057  F032         	movff	_tan$741+1,___ftdiv@f2+1
   665  001198  C058  F033         	movff	_tan$741+2,___ftdiv@f2+2
   666  00119C  EC7B  F005         	call	___ftdiv	;wreg free
   667  0011A0  C02E  F050         	movff	?___ftdiv,?_tan
   668  0011A4  C02F  F051         	movff	?___ftdiv+1,?_tan+1
   669  0011A8  C030  F052         	movff	?___ftdiv+2,?_tan+2
   670  0011AC  0012               	return		;funcret
   671  0011AE                     __end_of_tan:
   672                           	opt callstack 0
   673                           
   674 ;; *************** function _cos *****************
   675 ;; Defined at:
   676 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\cos.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;  f               3   73[COMRAM] void 
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  3   73[COMRAM] void 
   683 ;; Registers used:
   684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   690 ;;      Params:         3       0       0       0       0       0       0
   691 ;;      Locals:         3       0       0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0
   693 ;;      Totals:         6       0       0       0       0       0       0
   694 ;;Total ram usage:        6 bytes
   695 ;; Hardware stack levels used:    1
   696 ;; Hardware stack levels required when called:    4
   697 ;; This function calls:
   698 ;;		___ftadd
   699 ;;		___ftge
   700 ;;		_sin
   701 ;; This function is called by:
   702 ;;		_trigonometry
   703 ;;		_tan
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text3
   708  000F72                     __ptext3:
   709                           	opt callstack 0
   710  000F72                     _cos:
   711                           	opt callstack 24
   712                           
   713                           ;incstack = 0
   714  000F72  0E10               	movlw	16
   715  000F74  6E01               	movwf	___ftge@ff1^0,c
   716  000F76  0E49               	movlw	73
   717  000F78  6E02               	movwf	(___ftge@ff1+1)^0,c
   718  000F7A  0E40               	movlw	64
   719  000F7C  6E03               	movwf	(___ftge@ff1+2)^0,c
   720  000F7E  C04A  F004         	movff	cos@f,___ftge@ff2
   721  000F82  C04B  F005         	movff	cos@f+1,___ftge@ff2+1
   722  000F86  C04C  F006         	movff	cos@f+2,___ftge@ff2+2
   723  000F8A  EC37  F008         	call	___ftge	;wreg free
   724  000F8E  B0D8               	btfsc	status,0,c
   725  000F90  D023               	goto	l1646
   726  000F92  C04A  F018         	movff	cos@f,___ftadd@f1
   727  000F96  C04B  F019         	movff	cos@f+1,___ftadd@f1+1
   728  000F9A  C04C  F01A         	movff	cos@f+2,___ftadd@f1+2
   729  000F9E  0ECC               	movlw	204
   730  000FA0  6E1B               	movwf	___ftadd@f2^0,c
   731  000FA2  0E96               	movlw	150
   732  000FA4  6E1C               	movwf	(___ftadd@f2+1)^0,c
   733  000FA6  0EC0               	movlw	192
   734  000FA8  6E1D               	movwf	(___ftadd@f2+2)^0,c
   735  000FAA  EC2D  F004         	call	___ftadd	;wreg free
   736  000FAE  C018  F04D         	movff	?___ftadd,_cos$738
   737  000FB2  C019  F04E         	movff	?___ftadd+1,_cos$738+1
   738  000FB6  C01A  F04F         	movff	?___ftadd+2,_cos$738+2
   739  000FBA  C04D  F03D         	movff	_cos$738,sin@f
   740  000FBE  C04E  F03E         	movff	_cos$738+1,sin@f+1
   741  000FC2  C04F  F03F         	movff	_cos$738+2,sin@f+2
   742  000FC6  EC0F  F003         	call	_sin	;wreg free
   743  000FCA  C03D  F04A         	movff	?_sin,?_cos
   744  000FCE  C03E  F04B         	movff	?_sin+1,?_cos+1
   745  000FD2  C03F  F04C         	movff	?_sin+2,?_cos+2
   746  000FD6  0012               	return	
   747  000FD8                     l1646:
   748  000FD8  C04A  F018         	movff	cos@f,___ftadd@f1
   749  000FDC  C04B  F019         	movff	cos@f+1,___ftadd@f1+1
   750  000FE0  C04C  F01A         	movff	cos@f+2,___ftadd@f1+2
   751  000FE4  0E10               	movlw	16
   752  000FE6  6E1B               	movwf	___ftadd@f2^0,c
   753  000FE8  0EC9               	movlw	201
   754  000FEA  6E1C               	movwf	(___ftadd@f2+1)^0,c
   755  000FEC  0E3F               	movlw	63
   756  000FEE  6E1D               	movwf	(___ftadd@f2+2)^0,c
   757  000FF0  EC2D  F004         	call	___ftadd	;wreg free
   758  000FF4  D7DC               	goto	L1
   759  000FF6                     __end_of_cos:
   760                           	opt callstack 0
   761                           
   762 ;; *************** function _sin *****************
   763 ;; Defined at:
   764 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\sin.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;  f               3   60[COMRAM] void 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  x2              3   69[COMRAM] void 
   769 ;;  y               3   63[COMRAM] void 
   770 ;;  sgn             1   72[COMRAM] unsigned char 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  3   60[COMRAM] unsigned char 
   773 ;; Registers used:
   774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   780 ;;      Params:         3       0       0       0       0       0       0
   781 ;;      Locals:        10       0       0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0       0       0
   783 ;;      Totals:        13       0       0       0       0       0       0
   784 ;;Total ram usage:       13 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; Hardware stack levels required when called:    3
   787 ;; This function calls:
   788 ;;		___ftdiv
   789 ;;		___ftge
   790 ;;		___ftmul
   791 ;;		___ftneg
   792 ;;		___ftsub
   793 ;;		_eval_poly
   794 ;;		_floor
   795 ;; This function is called by:
   796 ;;		_trigonometry
   797 ;;		_cos
   798 ;;		_tan
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text4
   803  00061E                     __ptext4:
   804                           	opt callstack 0
   805  00061E                     _sin:
   806                           	opt callstack 25
   807                           
   808                           ;incstack = 0
   809  00061E  0E00               	movlw	0
   810  000620  6E49               	movwf	sin@sgn^0,c
   811  000622  AE3F               	btfss	(sin@f+2)^0,7,c
   812  000624  D010               	goto	l1612
   813  000626  C03D  F001         	movff	sin@f,___ftneg@f1
   814  00062A  C03E  F002         	movff	sin@f+1,___ftneg@f1+1
   815  00062E  C03F  F003         	movff	sin@f+2,___ftneg@f1+2
   816  000632  ECF7  F008         	call	___ftneg	;wreg free
   817  000636  C001  F03D         	movff	?___ftneg,sin@f
   818  00063A  C002  F03E         	movff	?___ftneg+1,sin@f+1
   819  00063E  C003  F03F         	movff	?___ftneg+2,sin@f+2
   820  000642  0E01               	movlw	1
   821  000644  6E49               	movwf	sin@sgn^0,c
   822  000646                     l1612:
   823  000646  C03D  F009         	movff	sin@f,___ftmul@f1
   824  00064A  C03E  F00A         	movff	sin@f+1,___ftmul@f1+1
   825  00064E  C03F  F00B         	movff	sin@f+2,___ftmul@f1+2
   826  000652  0EFA               	movlw	250
   827  000654  6E0C               	movwf	___ftmul@f2^0,c
   828  000656  0E22               	movlw	34
   829  000658  6E0D               	movwf	(___ftmul@f2+1)^0,c
   830  00065A  0E3E               	movlw	62
   831  00065C  6E0E               	movwf	(___ftmul@f2+2)^0,c
   832  00065E  EC01  F005         	call	___ftmul	;wreg free
   833  000662  C009  F03D         	movff	?___ftmul,sin@f
   834  000666  C00A  F03E         	movff	?___ftmul+1,sin@f+1
   835  00066A  C00B  F03F         	movff	?___ftmul+2,sin@f+2
   836  00066E  C03D  F02C         	movff	sin@f,___ftsub@f1
   837  000672  C03E  F02D         	movff	sin@f+1,___ftsub@f1+1
   838  000676  C03F  F02E         	movff	sin@f+2,___ftsub@f1+2
   839  00067A  C03D  F024         	movff	sin@f,floor@x
   840  00067E  C03E  F025         	movff	sin@f+1,floor@x+1
   841  000682  C03F  F026         	movff	sin@f+2,floor@x+2
   842  000686  ECEE  F005         	call	_floor	;wreg free
   843  00068A  C024  F02F         	movff	?_floor,___ftsub@f2
   844  00068E  C025  F030         	movff	?_floor+1,___ftsub@f2+1
   845  000692  C026  F031         	movff	?_floor+2,___ftsub@f2+2
   846  000696  ECD7  F008         	call	___ftsub	;wreg free
   847  00069A  C02C  F03D         	movff	?___ftsub,sin@f
   848  00069E  C02D  F03E         	movff	?___ftsub+1,sin@f+1
   849  0006A2  C02E  F03F         	movff	?___ftsub+2,sin@f+2
   850  0006A6  C03D  F009         	movff	sin@f,___ftmul@f1
   851  0006AA  C03E  F00A         	movff	sin@f+1,___ftmul@f1+1
   852  0006AE  C03F  F00B         	movff	sin@f+2,___ftmul@f1+2
   853  0006B2  0E00               	movlw	0
   854  0006B4  6E0C               	movwf	___ftmul@f2^0,c
   855  0006B6  0E80               	movlw	128
   856  0006B8  6E0D               	movwf	(___ftmul@f2+1)^0,c
   857  0006BA  0E40               	movlw	64
   858  0006BC  6E0E               	movwf	(___ftmul@f2+2)^0,c
   859  0006BE  EC01  F005         	call	___ftmul	;wreg free
   860  0006C2  C009  F03D         	movff	?___ftmul,sin@f
   861  0006C6  C00A  F03E         	movff	?___ftmul+1,sin@f+1
   862  0006CA  C00B  F03F         	movff	?___ftmul+2,sin@f+2
   863  0006CE  0E00               	movlw	0
   864  0006D0  6E01               	movwf	___ftge@ff1^0,c
   865  0006D2  0E00               	movlw	0
   866  0006D4  6E02               	movwf	(___ftge@ff1+1)^0,c
   867  0006D6  0E40               	movlw	64
   868  0006D8  6E03               	movwf	(___ftge@ff1+2)^0,c
   869  0006DA  C03D  F004         	movff	sin@f,___ftge@ff2
   870  0006DE  C03E  F005         	movff	sin@f+1,___ftge@ff2+1
   871  0006E2  C03F  F006         	movff	sin@f+2,___ftge@ff2+2
   872  0006E6  EC37  F008         	call	___ftge	;wreg free
   873  0006EA  B0D8               	btfsc	status,0,c
   874  0006EC  D01B               	goto	l1624
   875  0006EE  C03D  F02C         	movff	sin@f,___ftsub@f1
   876  0006F2  C03E  F02D         	movff	sin@f+1,___ftsub@f1+1
   877  0006F6  C03F  F02E         	movff	sin@f+2,___ftsub@f1+2
   878  0006FA  0E00               	movlw	0
   879  0006FC  6E2F               	movwf	___ftsub@f2^0,c
   880  0006FE  0E00               	movlw	0
   881  000700  6E30               	movwf	(___ftsub@f2+1)^0,c
   882  000702  0E40               	movlw	64
   883  000704  6E31               	movwf	(___ftsub@f2+2)^0,c
   884  000706  ECD7  F008         	call	___ftsub	;wreg free
   885  00070A  C02C  F03D         	movff	?___ftsub,sin@f
   886  00070E  C02D  F03E         	movff	?___ftsub+1,sin@f+1
   887  000712  C02E  F03F         	movff	?___ftsub+2,sin@f+2
   888  000716  5049               	movf	sin@sgn^0,w,c
   889  000718  A4D8               	btfss	status,2,c
   890  00071A  D002               	goto	u1340
   891  00071C  0E01               	movlw	1
   892  00071E  D001               	goto	u1350
   893  000720                     u1340:
   894  000720  0E00               	movlw	0
   895  000722                     u1350:
   896  000722  6E49               	movwf	sin@sgn^0,c
   897  000724                     l1624:
   898  000724  0E00               	movlw	0
   899  000726  6E01               	movwf	___ftge@ff1^0,c
   900  000728  0E80               	movlw	128
   901  00072A  6E02               	movwf	(___ftge@ff1+1)^0,c
   902  00072C  0E3F               	movlw	63
   903  00072E  6E03               	movwf	(___ftge@ff1+2)^0,c
   904  000730  C03D  F004         	movff	sin@f,___ftge@ff2
   905  000734  C03E  F005         	movff	sin@f+1,___ftge@ff2+1
   906  000738  C03F  F006         	movff	sin@f+2,___ftge@ff2+2
   907  00073C  EC37  F008         	call	___ftge	;wreg free
   908  000740  B0D8               	btfsc	status,0,c
   909  000742  D014               	goto	l702
   910  000744  0E00               	movlw	0
   911  000746  6E2C               	movwf	___ftsub@f1^0,c
   912  000748  0E00               	movlw	0
   913  00074A  6E2D               	movwf	(___ftsub@f1+1)^0,c
   914  00074C  0E40               	movlw	64
   915  00074E  6E2E               	movwf	(___ftsub@f1+2)^0,c
   916  000750  C03D  F02F         	movff	sin@f,___ftsub@f2
   917  000754  C03E  F030         	movff	sin@f+1,___ftsub@f2+1
   918  000758  C03F  F031         	movff	sin@f+2,___ftsub@f2+2
   919  00075C  ECD7  F008         	call	___ftsub	;wreg free
   920  000760  C02C  F03D         	movff	?___ftsub,sin@f
   921  000764  C02D  F03E         	movff	?___ftsub+1,sin@f+1
   922  000768  C02E  F03F         	movff	?___ftsub+2,sin@f+2
   923  00076C                     l702:
   924  00076C  C03D  F009         	movff	sin@f,___ftmul@f1
   925  000770  C03E  F00A         	movff	sin@f+1,___ftmul@f1+1
   926  000774  C03F  F00B         	movff	sin@f+2,___ftmul@f1+2
   927  000778  C03D  F00C         	movff	sin@f,___ftmul@f2
   928  00077C  C03E  F00D         	movff	sin@f+1,___ftmul@f2+1
   929  000780  C03F  F00E         	movff	sin@f+2,___ftmul@f2+2
   930  000784  EC01  F005         	call	___ftmul	;wreg free
   931  000788  C009  F046         	movff	?___ftmul,sin@x2
   932  00078C  C00A  F047         	movff	?___ftmul+1,sin@x2+1
   933  000790  C00B  F048         	movff	?___ftmul+2,sin@x2+2
   934  000794  C046  F024         	movff	sin@x2,eval_poly@x
   935  000798  C047  F025         	movff	sin@x2+1,eval_poly@x+1
   936  00079C  C048  F026         	movff	sin@x2+2,eval_poly@x+2
   937  0007A0  0E10               	movlw	low sin@coeff_b
   938  0007A2  6E27               	movwf	eval_poly@d^0,c
   939  0007A4  0E00               	movlw	0
   940  0007A6  6E29               	movwf	(eval_poly@n+1)^0,c
   941  0007A8  0E03               	movlw	3
   942  0007AA  6E28               	movwf	eval_poly@n^0,c
   943  0007AC  EC6E  F007         	call	_eval_poly	;wreg free
   944  0007B0  C024  F040         	movff	?_eval_poly,sin@y
   945  0007B4  C025  F041         	movff	?_eval_poly+1,sin@y+1
   946  0007B8  C026  F042         	movff	?_eval_poly+2,sin@y+2
   947  0007BC  C040  F031         	movff	sin@y,___ftdiv@f2
   948  0007C0  C041  F032         	movff	sin@y+1,___ftdiv@f2+1
   949  0007C4  C042  F033         	movff	sin@y+2,___ftdiv@f2+2
   950  0007C8  0E00               	movlw	0
   951  0007CA  6E29               	movwf	(eval_poly@n+1)^0,c
   952  0007CC  0E04               	movlw	4
   953  0007CE  6E28               	movwf	eval_poly@n^0,c
   954  0007D0  0E01               	movlw	low sin@coeff_a
   955  0007D2  6E27               	movwf	eval_poly@d^0,c
   956  0007D4  C046  F024         	movff	sin@x2,eval_poly@x
   957  0007D8  C047  F025         	movff	sin@x2+1,eval_poly@x+1
   958  0007DC  C048  F026         	movff	sin@x2+2,eval_poly@x+2
   959  0007E0  EC6E  F007         	call	_eval_poly	;wreg free
   960  0007E4  C024  F02E         	movff	?_eval_poly,___ftdiv@f1
   961  0007E8  C025  F02F         	movff	?_eval_poly+1,___ftdiv@f1+1
   962  0007EC  C026  F030         	movff	?_eval_poly+2,___ftdiv@f1+2
   963  0007F0  EC7B  F005         	call	___ftdiv	;wreg free
   964  0007F4  C02E  F043         	movff	?___ftdiv,_sin$739
   965  0007F8  C02F  F044         	movff	?___ftdiv+1,_sin$739+1
   966  0007FC  C030  F045         	movff	?___ftdiv+2,_sin$739+2
   967  000800  C03D  F009         	movff	sin@f,___ftmul@f1
   968  000804  C03E  F00A         	movff	sin@f+1,___ftmul@f1+1
   969  000808  C03F  F00B         	movff	sin@f+2,___ftmul@f1+2
   970  00080C  C043  F00C         	movff	_sin$739,___ftmul@f2
   971  000810  C044  F00D         	movff	_sin$739+1,___ftmul@f2+1
   972  000814  C045  F00E         	movff	_sin$739+2,___ftmul@f2+2
   973  000818  EC01  F005         	call	___ftmul	;wreg free
   974  00081C  C009  F03D         	movff	?___ftmul,sin@f
   975  000820  C00A  F03E         	movff	?___ftmul+1,sin@f+1
   976  000824  C00B  F03F         	movff	?___ftmul+2,sin@f+2
   977  000828  5049               	movf	sin@sgn^0,w,c
   978  00082A  B4D8               	btfsc	status,2,c
   979  00082C  D00F               	goto	l703
   980  00082E  C03D  F001         	movff	sin@f,___ftneg@f1
   981  000832  C03E  F002         	movff	sin@f+1,___ftneg@f1+1
   982  000836  C03F  F003         	movff	sin@f+2,___ftneg@f1+2
   983  00083A  ECF7  F008         	call	___ftneg	;wreg free
   984  00083E  C001  F03D         	movff	?___ftneg,?_sin
   985  000842  C002  F03E         	movff	?___ftneg+1,?_sin+1
   986  000846  C003  F03F         	movff	?___ftneg+2,?_sin+2
   987  00084A  0012               	return	
   988  00084C                     l703:
   989  00084C  C03D  F03D         	movff	sin@f,?_sin
   990  000850  C03E  F03E         	movff	sin@f+1,?_sin+1
   991  000854  C03F  F03F         	movff	sin@f+2,?_sin+2
   992  000858  0012               	return		;funcret
   993  00085A                     __end_of_sin:
   994                           	opt callstack 0
   995                           
   996 ;; *************** function _floor *****************
   997 ;; Defined at:
   998 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\floor.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  x               3   35[COMRAM] unsigned char 
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;  i               3   38[COMRAM] unsigned char 
  1003 ;;  expon           2   41[COMRAM] int 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  3   35[COMRAM] int 
  1006 ;; Registers used:
  1007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1013 ;;      Params:         3       0       0       0       0       0       0
  1014 ;;      Locals:         5       0       0       0       0       0       0
  1015 ;;      Temps:          0       0       0       0       0       0       0
  1016 ;;      Totals:         8       0       0       0       0       0       0
  1017 ;;Total ram usage:        8 bytes
  1018 ;; Hardware stack levels used:    1
  1019 ;; Hardware stack levels required when called:    2
  1020 ;; This function calls:
  1021 ;;		___altoft
  1022 ;;		___ftadd
  1023 ;;		___ftge
  1024 ;;		___fttol
  1025 ;;		_frexp
  1026 ;; This function is called by:
  1027 ;;		_sin
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text5
  1032  000BDC                     __ptext5:
  1033                           	opt callstack 0
  1034  000BDC                     _floor:
  1035                           	opt callstack 25
  1036                           
  1037                           ;incstack = 0
  1038  000BDC  C024  F001         	movff	floor@x,frexp@value
  1039  000BE0  C025  F002         	movff	floor@x+1,frexp@value+1
  1040  000BE4  C026  F003         	movff	floor@x+2,frexp@value+2
  1041  000BE8  0E2A               	movlw	low floor@expon
  1042  000BEA  6E04               	movwf	frexp@eptr^0,c
  1043  000BEC  EC71  F008         	call	_frexp	;wreg free
  1044  000BF0  AE2B               	btfss	(floor@expon+1)^0,7,c
  1045  000BF2  D010               	goto	l1588
  1046  000BF4  AE26               	btfss	(floor@x+2)^0,7,c
  1047  000BF6  D007               	goto	l1584
  1048  000BF8  0E00               	movlw	0
  1049  000BFA  6E24               	movwf	?_floor^0,c
  1050  000BFC  0E80               	movlw	128
  1051  000BFE  6E25               	movwf	(?_floor+1)^0,c
  1052  000C00  0EBF               	movlw	191
  1053  000C02  6E26               	movwf	(?_floor+2)^0,c
  1054  000C04  0012               	return	
  1055  000C06                     l1584:
  1056  000C06  0E00               	movlw	0
  1057  000C08  6E24               	movwf	?_floor^0,c
  1058  000C0A  0E00               	movlw	0
  1059  000C0C  6E25               	movwf	(?_floor+1)^0,c
  1060  000C0E  0E00               	movlw	0
  1061  000C10  6E26               	movwf	(?_floor+2)^0,c
  1062  000C12  0012               	return	
  1063  000C14                     l1588:
  1064  000C14  502B               	movf	(floor@expon+1)^0,w,c
  1065  000C16  E104               	bnz	u1290
  1066  000C18  0E15               	movlw	21
  1067  000C1A  5C2A               	subwf	floor@expon^0,w,c
  1068  000C1C  A0D8               	btfss	status,0,c
  1069  000C1E  D007               	goto	l1592
  1070  000C20                     u1290:
  1071  000C20  C024  F024         	movff	floor@x,?_floor
  1072  000C24  C025  F025         	movff	floor@x+1,?_floor+1
  1073  000C28  C026  F026         	movff	floor@x+2,?_floor+2
  1074  000C2C  0012               	return	
  1075  000C2E                     l1592:
  1076  000C2E  C024  F001         	movff	floor@x,___fttol@f1
  1077  000C32  C025  F002         	movff	floor@x+1,___fttol@f1+1
  1078  000C36  C026  F003         	movff	floor@x+2,___fttol@f1+2
  1079  000C3A  EC5B  F006         	call	___fttol	;wreg free
  1080  000C3E  C001  F010         	movff	?___fttol,___altoft@c
  1081  000C42  C002  F011         	movff	?___fttol+1,___altoft@c+1
  1082  000C46  C003  F012         	movff	?___fttol+2,___altoft@c+2
  1083  000C4A  C004  F013         	movff	?___fttol+3,___altoft@c+3
  1084  000C4E  ECFB  F007         	call	___altoft	;wreg free
  1085  000C52  C010  F027         	movff	?___altoft,floor@i
  1086  000C56  C011  F028         	movff	?___altoft+1,floor@i+1
  1087  000C5A  C012  F029         	movff	?___altoft+2,floor@i+2
  1088  000C5E  C024  F001         	movff	floor@x,___ftge@ff1
  1089  000C62  C025  F002         	movff	floor@x+1,___ftge@ff1+1
  1090  000C66  C026  F003         	movff	floor@x+2,___ftge@ff1+2
  1091  000C6A  C027  F004         	movff	floor@i,___ftge@ff2
  1092  000C6E  C028  F005         	movff	floor@i+1,___ftge@ff2+1
  1093  000C72  C029  F006         	movff	floor@i+2,___ftge@ff2+2
  1094  000C76  EC37  F008         	call	___ftge	;wreg free
  1095  000C7A  B0D8               	btfsc	status,0,c
  1096  000C7C  D015               	goto	l726
  1097  000C7E  C027  F018         	movff	floor@i,___ftadd@f1
  1098  000C82  C028  F019         	movff	floor@i+1,___ftadd@f1+1
  1099  000C86  C029  F01A         	movff	floor@i+2,___ftadd@f1+2
  1100  000C8A  0E00               	movlw	0
  1101  000C8C  6E1B               	movwf	___ftadd@f2^0,c
  1102  000C8E  0E80               	movlw	128
  1103  000C90  6E1C               	movwf	(___ftadd@f2+1)^0,c
  1104  000C92  0EBF               	movlw	191
  1105  000C94  6E1D               	movwf	(___ftadd@f2+2)^0,c
  1106  000C96  EC2D  F004         	call	___ftadd	;wreg free
  1107  000C9A  C018  F024         	movff	?___ftadd,?_floor
  1108  000C9E  C019  F025         	movff	?___ftadd+1,?_floor+1
  1109  000CA2  C01A  F026         	movff	?___ftadd+2,?_floor+2
  1110  000CA6  0012               	return	
  1111  000CA8                     l726:
  1112  000CA8  C027  F024         	movff	floor@i,?_floor
  1113  000CAC  C028  F025         	movff	floor@i+1,?_floor+1
  1114  000CB0  C029  F026         	movff	floor@i+2,?_floor+2
  1115  000CB4  0012               	return		;funcret
  1116  000CB6                     __end_of_floor:
  1117                           	opt callstack 0
  1118                           
  1119 ;; *************** function _frexp *****************
  1120 ;; Defined at:
  1121 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\frexp.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  value           3    0[COMRAM] int 
  1124 ;;  eptr            1    3[COMRAM] PTR int 
  1125 ;;		 -> floor@expon(2), 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  3    0[COMRAM] PTR int 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1137 ;;      Params:         4       0       0       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0       0       0
  1139 ;;      Temps:          2       0       0       0       0       0       0
  1140 ;;      Totals:         6       0       0       0       0       0       0
  1141 ;;Total ram usage:        6 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_floor
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text6
  1151  0010E2                     __ptext6:
  1152                           	opt callstack 0
  1153  0010E2                     _frexp:
  1154                           	opt callstack 26
  1155                           
  1156                           ;incstack = 0
  1157  0010E2  5001               	movf	frexp@value^0,w,c
  1158  0010E4  1002               	iorwf	(frexp@value+1)^0,w,c
  1159  0010E6  1003               	iorwf	(frexp@value+2)^0,w,c
  1160  0010E8  A4D8               	btfss	status,2,c
  1161  0010EA  D008               	goto	l1506
  1162  0010EC  5004               	movf	frexp@eptr^0,w,c
  1163  0010EE  6ED9               	movwf	fsr2l,c
  1164  0010F0  6ADA               	clrf	fsr2h,c
  1165  0010F2  0E00               	movlw	0
  1166  0010F4  6EDE               	movwf	postinc2,c
  1167  0010F6  0E00               	movlw	0
  1168  0010F8  6EDD               	movwf	postdec2,c
  1169  0010FA  0012               	return	
  1170  0010FC                     l1506:
  1171  0010FC  5003               	movf	(frexp@value+2)^0,w,c
  1172  0010FE  0B7F               	andlw	127
  1173  001100  6E05               	movwf	??_frexp^0,c
  1174  001102  6A06               	clrf	(??_frexp+1)^0,c
  1175  001104  90D8               	bcf	status,0,c
  1176  001106  3605               	rlcf	??_frexp^0,f,c
  1177  001108  3606               	rlcf	(??_frexp+1)^0,f,c
  1178  00110A  5004               	movf	frexp@eptr^0,w,c
  1179  00110C  6ED9               	movwf	fsr2l,c
  1180  00110E  6ADA               	clrf	fsr2h,c
  1181  001110  C005  FFDE         	movff	??_frexp,postinc2
  1182  001114  C006  FFDD         	movff	??_frexp+1,postdec2
  1183  001118  5004               	movf	frexp@eptr^0,w,c
  1184  00111A  6ED9               	movwf	fsr2l,c
  1185  00111C  6ADA               	clrf	fsr2h,c
  1186  00111E  AE02               	btfss	(frexp@value+1)^0,7,c
  1187  001120  D003               	goto	u1190
  1188  001122  6A05               	clrf	??_frexp^0,c
  1189  001124  2A05               	incf	??_frexp^0,f,c
  1190  001126  D001               	goto	u1198
  1191  001128                     u1190:
  1192  001128  6A05               	clrf	??_frexp^0,c
  1193  00112A                     u1198:
  1194  00112A  5005               	movf	??_frexp^0,w,c
  1195  00112C  12DE               	iorwf	postinc2,f,c
  1196  00112E  0E00               	movlw	0
  1197  001130  12DD               	iorwf	postdec2,f,c
  1198  001132  5004               	movf	frexp@eptr^0,w,c
  1199  001134  6ED9               	movwf	fsr2l,c
  1200  001136  6ADA               	clrf	fsr2h,c
  1201  001138  0E82               	movlw	130
  1202  00113A  26DE               	addwf	postinc2,f,c
  1203  00113C  0EFF               	movlw	255
  1204  00113E  22DD               	addwfc	postdec2,f,c
  1205  001140  5003               	movf	(frexp@value+2)^0,w,c
  1206  001142  0B80               	andlw	-128
  1207  001144  093F               	iorlw	63
  1208  001146  6E03               	movwf	(frexp@value+2)^0,c
  1209  001148  9E02               	bcf	(frexp@value+1)^0,7,c
  1210  00114A  0012               	return		;funcret
  1211  00114C                     __end_of_frexp:
  1212                           	opt callstack 0
  1213                           
  1214 ;; *************** function ___fttol *****************
  1215 ;; Defined at:
  1216 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\fttol.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  f1              3    0[COMRAM] float 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  lval            4   10[COMRAM] unsigned long 
  1221 ;;  exp1            1   14[COMRAM] unsigned char 
  1222 ;;  sign1           1    9[COMRAM] unsigned char 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  4    0[COMRAM] long 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         4       0       0       0       0       0       0
  1233 ;;      Locals:         6       0       0       0       0       0       0
  1234 ;;      Temps:          5       0       0       0       0       0       0
  1235 ;;      Totals:        15       0       0       0       0       0       0
  1236 ;;Total ram usage:       15 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_floor
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text7
  1246  000CB6                     __ptext7:
  1247                           	opt callstack 0
  1248  000CB6                     ___fttol:
  1249                           	opt callstack 26
  1250                           
  1251                           ;incstack = 0
  1252  000CB6  C003  F005         	movff	___fttol@f1+2,??___fttol
  1253  000CBA  6A06               	clrf	(??___fttol+1)^0,c
  1254  000CBC  6A07               	clrf	(??___fttol+2)^0,c
  1255  000CBE  3402               	rlcf	(___fttol@f1+1)^0,w,c
  1256  000CC0  3605               	rlcf	??___fttol^0,f,c
  1257  000CC2  E301               	bnc	u1101
  1258  000CC4  8006               	bsf	(??___fttol+1)^0,0,c
  1259  000CC6                     u1101:
  1260  000CC6  5005               	movf	??___fttol^0,w,c
  1261  000CC8  6E0F               	movwf	___fttol@exp1^0,c
  1262  000CCA  500F               	movf	___fttol@exp1^0,w,c
  1263  000CCC  A4D8               	btfss	status,2,c
  1264  000CCE  D009               	goto	l1460
  1265  000CD0                     u1110:
  1266  000CD0  0E00               	movlw	0
  1267  000CD2  6E01               	movwf	?___fttol^0,c
  1268  000CD4  0E00               	movlw	0
  1269  000CD6  6E02               	movwf	(?___fttol+1)^0,c
  1270  000CD8  0E00               	movlw	0
  1271  000CDA  6E03               	movwf	(?___fttol+2)^0,c
  1272  000CDC  0E00               	movlw	0
  1273  000CDE  6E04               	movwf	(?___fttol+3)^0,c
  1274  000CE0  0012               	return	
  1275  000CE2                     l1460:
  1276  000CE2  0E17               	movlw	23
  1277  000CE4  6E05               	movwf	??___fttol^0,c
  1278  000CE6  C001  F006         	movff	___fttol@f1,??___fttol+1
  1279  000CEA  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  1280  000CEE  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  1281  000CF2  2805               	incf	??___fttol^0,w,c
  1282  000CF4  6E09               	movwf	(??___fttol+4)^0,c
  1283  000CF6  D004               	goto	u1120
  1284  000CF8                     u1125:
  1285  000CF8  90D8               	bcf	status,0,c
  1286  000CFA  3208               	rrcf	(??___fttol+3)^0,f,c
  1287  000CFC  3207               	rrcf	(??___fttol+2)^0,f,c
  1288  000CFE  3206               	rrcf	(??___fttol+1)^0,f,c
  1289  000D00                     u1120:
  1290  000D00  2E09               	decfsz	(??___fttol+4)^0,f,c
  1291  000D02  D7FA               	goto	u1125
  1292  000D04  5006               	movf	(??___fttol+1)^0,w,c
  1293  000D06  6E0A               	movwf	___fttol@sign1^0,c
  1294  000D08  8E02               	bsf	(___fttol@f1+1)^0,7,c
  1295  000D0A  0EFF               	movlw	255
  1296  000D0C  1601               	andwf	___fttol@f1^0,f,c
  1297  000D0E  0EFF               	movlw	255
  1298  000D10  1602               	andwf	(___fttol@f1+1)^0,f,c
  1299  000D12  0E00               	movlw	0
  1300  000D14  1603               	andwf	(___fttol@f1+2)^0,f,c
  1301  000D16  5001               	movf	___fttol@f1^0,w,c
  1302  000D18  6E0B               	movwf	___fttol@lval^0,c
  1303  000D1A  5002               	movf	(___fttol@f1+1)^0,w,c
  1304  000D1C  6E0C               	movwf	(___fttol@lval+1)^0,c
  1305  000D1E  5003               	movf	(___fttol@f1+2)^0,w,c
  1306  000D20  6E0D               	movwf	(___fttol@lval+2)^0,c
  1307  000D22  6A0E               	clrf	(___fttol@lval+3)^0,c
  1308  000D24  0E8E               	movlw	142
  1309  000D26  5E0F               	subwf	___fttol@exp1^0,f,c
  1310  000D28  AE0F               	btfss	___fttol@exp1^0,7,c
  1311  000D2A  D00D               	goto	l1482
  1312  000D2C  500F               	movf	___fttol@exp1^0,w,c
  1313  000D2E  0A80               	xorlw	128
  1314  000D30  0F8F               	addlw	143
  1315  000D32  A0D8               	btfss	status,0,c
  1316  000D34  D7CD               	goto	u1110
  1317  000D36                     l1478:
  1318  000D36  90D8               	bcf	status,0,c
  1319  000D38  320E               	rrcf	(___fttol@lval+3)^0,f,c
  1320  000D3A  320D               	rrcf	(___fttol@lval+2)^0,f,c
  1321  000D3C  320C               	rrcf	(___fttol@lval+1)^0,f,c
  1322  000D3E  320B               	rrcf	___fttol@lval^0,f,c
  1323  000D40  3E0F               	incfsz	___fttol@exp1^0,f,c
  1324  000D42  D7F9               	goto	l1478
  1325  000D44  D00D               	goto	u1160
  1326  000D46                     l1482:
  1327  000D46  0E17               	movlw	23
  1328  000D48  640F               	cpfsgt	___fttol@exp1^0,c
  1329  000D4A  D007               	goto	l1490
  1330  000D4C  D7C1               	goto	u1110
  1331  000D4E                     l1488:
  1332  000D4E  90D8               	bcf	status,0,c
  1333  000D50  360B               	rlcf	___fttol@lval^0,f,c
  1334  000D52  360C               	rlcf	(___fttol@lval+1)^0,f,c
  1335  000D54  360D               	rlcf	(___fttol@lval+2)^0,f,c
  1336  000D56  360E               	rlcf	(___fttol@lval+3)^0,f,c
  1337  000D58  060F               	decf	___fttol@exp1^0,f,c
  1338  000D5A                     l1490:
  1339  000D5A  500F               	movf	___fttol@exp1^0,w,c
  1340  000D5C  A4D8               	btfss	status,2,c
  1341  000D5E  D7F7               	goto	l1488
  1342  000D60                     u1160:
  1343  000D60  500A               	movf	___fttol@sign1^0,w,c
  1344  000D62  B4D8               	btfsc	status,2,c
  1345  000D64  D008               	goto	l1496
  1346  000D66  1E0E               	comf	(___fttol@lval+3)^0,f,c
  1347  000D68  1E0D               	comf	(___fttol@lval+2)^0,f,c
  1348  000D6A  1E0C               	comf	(___fttol@lval+1)^0,f,c
  1349  000D6C  6C0B               	negf	___fttol@lval^0,c
  1350  000D6E  0E00               	movlw	0
  1351  000D70  220C               	addwfc	(___fttol@lval+1)^0,f,c
  1352  000D72  220D               	addwfc	(___fttol@lval+2)^0,f,c
  1353  000D74  220E               	addwfc	(___fttol@lval+3)^0,f,c
  1354  000D76                     l1496:
  1355  000D76  C00B  F001         	movff	___fttol@lval,?___fttol
  1356  000D7A  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  1357  000D7E  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  1358  000D82  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  1359  000D86  0012               	return		;funcret
  1360  000D88                     __end_of___fttol:
  1361                           	opt callstack 0
  1362                           
  1363 ;; *************** function ___ftge *****************
  1364 ;; Defined at:
  1365 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftge.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  ff1             3    0[COMRAM] float 
  1368 ;;  ff2             3    3[COMRAM] float 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;		None
  1371 ;; Return value:  Size  Location     Type
  1372 ;;		None               void
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1380 ;;      Params:         6       0       0       0       0       0       0
  1381 ;;      Locals:         0       0       0       0       0       0       0
  1382 ;;      Temps:          3       0       0       0       0       0       0
  1383 ;;      Totals:         9       0       0       0       0       0       0
  1384 ;;Total ram usage:        9 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_cos
  1390 ;;		_sin
  1391 ;;		_floor
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text8
  1396  00106E                     __ptext8:
  1397                           	opt callstack 0
  1398  00106E                     ___ftge:
  1399                           	opt callstack 26
  1400                           
  1401                           ;incstack = 0
  1402  00106E  AE03               	btfss	(___ftge@ff1+2)^0,7,c
  1403  001070  D00F               	goto	l1440
  1404  001072  0E00               	movlw	0
  1405  001074  6E07               	movwf	??___ftge^0,c
  1406  001076  0E00               	movlw	0
  1407  001078  6E08               	movwf	(??___ftge+1)^0,c
  1408  00107A  0E80               	movlw	128
  1409  00107C  6E09               	movwf	(??___ftge+2)^0,c
  1410  00107E  5001               	movf	___ftge@ff1^0,w,c
  1411  001080  5C07               	subwf	??___ftge^0,w,c
  1412  001082  6E01               	movwf	___ftge@ff1^0,c
  1413  001084  5002               	movf	(___ftge@ff1+1)^0,w,c
  1414  001086  5808               	subwfb	(??___ftge+1)^0,w,c
  1415  001088  6E02               	movwf	(___ftge@ff1+1)^0,c
  1416  00108A  5003               	movf	(___ftge@ff1+2)^0,w,c
  1417  00108C  5809               	subwfb	(??___ftge+2)^0,w,c
  1418  00108E  6E03               	movwf	(___ftge@ff1+2)^0,c
  1419  001090                     l1440:
  1420  001090  AE06               	btfss	(___ftge@ff2+2)^0,7,c
  1421  001092  D00F               	goto	l1444
  1422  001094  0E00               	movlw	0
  1423  001096  6E07               	movwf	??___ftge^0,c
  1424  001098  0E00               	movlw	0
  1425  00109A  6E08               	movwf	(??___ftge+1)^0,c
  1426  00109C  0E80               	movlw	128
  1427  00109E  6E09               	movwf	(??___ftge+2)^0,c
  1428  0010A0  5004               	movf	___ftge@ff2^0,w,c
  1429  0010A2  5C07               	subwf	??___ftge^0,w,c
  1430  0010A4  6E04               	movwf	___ftge@ff2^0,c
  1431  0010A6  5005               	movf	(___ftge@ff2+1)^0,w,c
  1432  0010A8  5808               	subwfb	(??___ftge+1)^0,w,c
  1433  0010AA  6E05               	movwf	(___ftge@ff2+1)^0,c
  1434  0010AC  5006               	movf	(___ftge@ff2+2)^0,w,c
  1435  0010AE  5809               	subwfb	(??___ftge+2)^0,w,c
  1436  0010B0  6E06               	movwf	(___ftge@ff2+2)^0,c
  1437  0010B2                     l1444:
  1438  0010B2  0E00               	movlw	0
  1439  0010B4  1A01               	xorwf	___ftge@ff1^0,f,c
  1440  0010B6  0E00               	movlw	0
  1441  0010B8  1A02               	xorwf	(___ftge@ff1+1)^0,f,c
  1442  0010BA  0E80               	movlw	128
  1443  0010BC  1A03               	xorwf	(___ftge@ff1+2)^0,f,c
  1444  0010BE  0E00               	movlw	0
  1445  0010C0  1A04               	xorwf	___ftge@ff2^0,f,c
  1446  0010C2  0E00               	movlw	0
  1447  0010C4  1A05               	xorwf	(___ftge@ff2+1)^0,f,c
  1448  0010C6  0E80               	movlw	128
  1449  0010C8  1A06               	xorwf	(___ftge@ff2+2)^0,f,c
  1450  0010CA  5004               	movf	___ftge@ff2^0,w,c
  1451  0010CC  5C01               	subwf	___ftge@ff1^0,w,c
  1452  0010CE  5005               	movf	(___ftge@ff2+1)^0,w,c
  1453  0010D0  5802               	subwfb	(___ftge@ff1+1)^0,w,c
  1454  0010D2  5006               	movf	(___ftge@ff2+2)^0,w,c
  1455  0010D4  5803               	subwfb	(___ftge@ff1+2)^0,w,c
  1456  0010D6  B0D8               	btfsc	status,0,c
  1457  0010D8  D002               	goto	l1450
  1458  0010DA  90D8               	bcf	status,0,c
  1459  0010DC  0012               	return	
  1460  0010DE                     l1450:
  1461  0010DE  80D8               	bsf	status,0,c
  1462  0010E0  0012               	return		;funcret
  1463  0010E2                     __end_of___ftge:
  1464                           	opt callstack 0
  1465                           
  1466 ;; *************** function ___altoft *****************
  1467 ;; Defined at:
  1468 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\altoft.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  c               4   15[COMRAM] long 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  sign            1   24[COMRAM] unsigned char 
  1473 ;;  exp             1   23[COMRAM] unsigned char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  3   15[COMRAM] float 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1483 ;;      Params:         4       0       0       0       0       0       0
  1484 ;;      Locals:         2       0       0       0       0       0       0
  1485 ;;      Temps:          4       0       0       0       0       0       0
  1486 ;;      Totals:        10       0       0       0       0       0       0
  1487 ;;Total ram usage:       10 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    1
  1490 ;; This function calls:
  1491 ;;		___ftpack
  1492 ;; This function is called by:
  1493 ;;		_floor
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text9
  1498  000FF6                     __ptext9:
  1499                           	opt callstack 0
  1500  000FF6                     ___altoft:
  1501                           	opt callstack 25
  1502                           
  1503                           ;incstack = 0
  1504  000FF6  0E00               	movlw	0
  1505  000FF8  6E19               	movwf	___altoft@sign^0,c
  1506  000FFA  0E8E               	movlw	142
  1507  000FFC  6E18               	movwf	___altoft@exp^0,c
  1508  000FFE  AE13               	btfss	(___altoft@c+3)^0,7,c
  1509  001000  D011               	goto	l1312
  1510  001002  1E13               	comf	(___altoft@c+3)^0,f,c
  1511  001004  1E12               	comf	(___altoft@c+2)^0,f,c
  1512  001006  1E11               	comf	(___altoft@c+1)^0,f,c
  1513  001008  6C10               	negf	___altoft@c^0,c
  1514  00100A  0E00               	movlw	0
  1515  00100C  2211               	addwfc	(___altoft@c+1)^0,f,c
  1516  00100E  2212               	addwfc	(___altoft@c+2)^0,f,c
  1517  001010  2213               	addwfc	(___altoft@c+3)^0,f,c
  1518  001012  0E01               	movlw	1
  1519  001014  6E19               	movwf	___altoft@sign^0,c
  1520  001016  D006               	goto	l1312
  1521  001018                     l1310:
  1522  001018  90D8               	bcf	status,0,c
  1523  00101A  3213               	rrcf	(___altoft@c+3)^0,f,c
  1524  00101C  3212               	rrcf	(___altoft@c+2)^0,f,c
  1525  00101E  3211               	rrcf	(___altoft@c+1)^0,f,c
  1526  001020  3210               	rrcf	___altoft@c^0,f,c
  1527  001022  2A18               	incf	___altoft@exp^0,f,c
  1528  001024                     l1312:
  1529  001024  0E00               	movlw	0
  1530  001026  1410               	andwf	___altoft@c^0,w,c
  1531  001028  6E14               	movwf	??___altoft^0,c
  1532  00102A  0E00               	movlw	0
  1533  00102C  1411               	andwf	(___altoft@c+1)^0,w,c
  1534  00102E  6E15               	movwf	(??___altoft+1)^0,c
  1535  001030  0E00               	movlw	0
  1536  001032  1412               	andwf	(___altoft@c+2)^0,w,c
  1537  001034  6E16               	movwf	(??___altoft+2)^0,c
  1538  001036  0EFF               	movlw	255
  1539  001038  1413               	andwf	(___altoft@c+3)^0,w,c
  1540  00103A  6E17               	movwf	(??___altoft+3)^0,c
  1541  00103C  5014               	movf	??___altoft^0,w,c
  1542  00103E  1015               	iorwf	(??___altoft+1)^0,w,c
  1543  001040  1016               	iorwf	(??___altoft+2)^0,w,c
  1544  001042  1017               	iorwf	(??___altoft+3)^0,w,c
  1545  001044  A4D8               	btfss	status,2,c
  1546  001046  D7E8               	goto	l1310
  1547  001048  C010  F001         	movff	___altoft@c,___ftpack@arg
  1548  00104C  C011  F002         	movff	___altoft@c+1,___ftpack@arg+1
  1549  001050  C012  F003         	movff	___altoft@c+2,___ftpack@arg+2
  1550  001054  C018  F004         	movff	___altoft@exp,___ftpack@exp
  1551  001058  C019  F005         	movff	___altoft@sign,___ftpack@sign
  1552  00105C  ECC4  F006         	call	___ftpack	;wreg free
  1553  001060  C001  F010         	movff	?___ftpack,?___altoft
  1554  001064  C002  F011         	movff	?___ftpack+1,?___altoft+1
  1555  001068  C003  F012         	movff	?___ftpack+2,?___altoft+2
  1556  00106C  0012               	return		;funcret
  1557  00106E                     __end_of___altoft:
  1558                           	opt callstack 0
  1559                           
  1560 ;; *************** function _eval_poly *****************
  1561 ;; Defined at:
  1562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\evalpoly.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  x               3   35[COMRAM] float 
  1565 ;;  d               1   38[COMRAM] PTR const 
  1566 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  1567 ;;  n               2   39[COMRAM] int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  res             3   42[COMRAM] int 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  3   35[COMRAM] int 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1579 ;;      Params:         6       0       0       0       0       0       0
  1580 ;;      Locals:         3       0       0       0       0       0       0
  1581 ;;      Temps:          1       0       0       0       0       0       0
  1582 ;;      Totals:        10       0       0       0       0       0       0
  1583 ;;Total ram usage:       10 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    2
  1586 ;; This function calls:
  1587 ;;		___ftadd
  1588 ;;		___ftmul
  1589 ;; This function is called by:
  1590 ;;		_sin
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text10
  1595  000EDC                     __ptext10:
  1596                           	opt callstack 0
  1597  000EDC                     _eval_poly:
  1598                           	opt callstack 25
  1599                           
  1600                           ;incstack = 0
  1601  000EDC  5028               	movf	eval_poly@n^0,w,c
  1602  000EDE  0D03               	mullw	3
  1603  000EE0  5027               	movf	eval_poly@d^0,w,c
  1604  000EE2  24F3               	addwf	243,w,c
  1605  000EE4  6E2A               	movwf	??_eval_poly^0,c
  1606  000EE6  C02A  FFF6         	movff	??_eval_poly,tblptrl
  1607  000EEA                     	if	0	;There is only one active tblptr byte
  1608  000EEA                     	endif
  1609  000EEA                     	if	0	;tblptru may be non-zero
  1610  000EEA                     	endif
  1611  000EEA                     	if	0	;tblptru may be non-zero
  1612  000EEA                     	endif
  1613  000EEA  0009               	tblrd		*+
  1614  000EEC  CFF5 F02B          	movff	tablat,eval_poly@res
  1615  000EF0  0009               	tblrd		*+
  1616  000EF2  CFF5 F02C          	movff	tablat,eval_poly@res+1
  1617  000EF6  000A               	tblrd		*-
  1618  000EF8  CFF5 F02D          	movff	tablat,eval_poly@res+2
  1619  000EFC  D02F               	goto	l1602
  1620  000EFE                     l1600:
  1621  000EFE  C02B  F00C         	movff	eval_poly@res,___ftmul@f2
  1622  000F02  C02C  F00D         	movff	eval_poly@res+1,___ftmul@f2+1
  1623  000F06  C02D  F00E         	movff	eval_poly@res+2,___ftmul@f2+2
  1624  000F0A  C024  F009         	movff	eval_poly@x,___ftmul@f1
  1625  000F0E  C025  F00A         	movff	eval_poly@x+1,___ftmul@f1+1
  1626  000F12  C026  F00B         	movff	eval_poly@x+2,___ftmul@f1+2
  1627  000F16  EC01  F005         	call	___ftmul	;wreg free
  1628  000F1A  C009  F018         	movff	?___ftmul,___ftadd@f1
  1629  000F1E  C00A  F019         	movff	?___ftmul+1,___ftadd@f1+1
  1630  000F22  C00B  F01A         	movff	?___ftmul+2,___ftadd@f1+2
  1631  000F26  0628               	decf	eval_poly@n^0,f,c
  1632  000F28  A0D8               	btfss	status,0,c
  1633  000F2A  0629               	decf	(eval_poly@n+1)^0,f,c
  1634  000F2C  5028               	movf	eval_poly@n^0,w,c
  1635  000F2E  0D03               	mullw	3
  1636  000F30  5027               	movf	eval_poly@d^0,w,c
  1637  000F32  24F3               	addwf	243,w,c
  1638  000F34  6E2A               	movwf	??_eval_poly^0,c
  1639  000F36  C02A  FFF6         	movff	??_eval_poly,tblptrl
  1640  000F3A                     	if	0	;There is only one active tblptr byte
  1641  000F3A                     	endif
  1642  000F3A                     	if	0	;tblptru may be non-zero
  1643  000F3A                     	endif
  1644  000F3A                     	if	0	;tblptru may be non-zero
  1645  000F3A                     	endif
  1646  000F3A  0009               	tblrd		*+
  1647  000F3C  CFF5 F01B          	movff	tablat,___ftadd@f2
  1648  000F40  0009               	tblrd		*+
  1649  000F42  CFF5 F01C          	movff	tablat,___ftadd@f2+1
  1650  000F46  000A               	tblrd		*-
  1651  000F48  CFF5 F01D          	movff	tablat,___ftadd@f2+2
  1652  000F4C  EC2D  F004         	call	___ftadd	;wreg free
  1653  000F50  C018  F02B         	movff	?___ftadd,eval_poly@res
  1654  000F54  C019  F02C         	movff	?___ftadd+1,eval_poly@res+1
  1655  000F58  C01A  F02D         	movff	?___ftadd+2,eval_poly@res+2
  1656  000F5C                     l1602:
  1657  000F5C  5028               	movf	eval_poly@n^0,w,c
  1658  000F5E  1029               	iorwf	(eval_poly@n+1)^0,w,c
  1659  000F60  A4D8               	btfss	status,2,c
  1660  000F62  D7CD               	goto	l1600
  1661  000F64  C02B  F024         	movff	eval_poly@res,?_eval_poly
  1662  000F68  C02C  F025         	movff	eval_poly@res+1,?_eval_poly+1
  1663  000F6C  C02D  F026         	movff	eval_poly@res+2,?_eval_poly+2
  1664  000F70  0012               	return		;funcret
  1665  000F72                     __end_of_eval_poly:
  1666                           	opt callstack 0
  1667                           
  1668 ;; *************** function ___ftmul *****************
  1669 ;; Defined at:
  1670 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftmul.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  f1              3    8[COMRAM] float 
  1673 ;;  f2              3   11[COMRAM] float 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  1676 ;;  sign            1   22[COMRAM] unsigned char 
  1677 ;;  cntr            1   21[COMRAM] unsigned char 
  1678 ;;  exp             1   17[COMRAM] unsigned char 
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  3    8[COMRAM] float 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, status,0, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1688 ;;      Params:         6       0       0       0       0       0       0
  1689 ;;      Locals:         6       0       0       0       0       0       0
  1690 ;;      Temps:          3       0       0       0       0       0       0
  1691 ;;      Totals:        15       0       0       0       0       0       0
  1692 ;;Total ram usage:       15 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    1
  1695 ;; This function calls:
  1696 ;;		___ftpack
  1697 ;; This function is called by:
  1698 ;;		_sin
  1699 ;;		_eval_poly
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text11
  1704  000A02                     __ptext11:
  1705                           	opt callstack 0
  1706  000A02                     ___ftmul:
  1707                           	opt callstack 25
  1708                           
  1709                           ;incstack = 0
  1710  000A02  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  1711  000A06  6A10               	clrf	(??___ftmul+1)^0,c
  1712  000A08  6A11               	clrf	(??___ftmul+2)^0,c
  1713  000A0A  340A               	rlcf	(___ftmul@f1+1)^0,w,c
  1714  000A0C  360F               	rlcf	??___ftmul^0,f,c
  1715  000A0E  E301               	bnc	u1011
  1716  000A10  8010               	bsf	(??___ftmul+1)^0,0,c
  1717  000A12                     u1011:
  1718  000A12  500F               	movf	??___ftmul^0,w,c
  1719  000A14  6E12               	movwf	___ftmul@exp^0,c
  1720  000A16  5012               	movf	___ftmul@exp^0,w,c
  1721  000A18  A4D8               	btfss	status,2,c
  1722  000A1A  D007               	goto	l1394
  1723  000A1C  0E00               	movlw	0
  1724  000A1E  6E09               	movwf	?___ftmul^0,c
  1725  000A20  0E00               	movlw	0
  1726  000A22  6E0A               	movwf	(?___ftmul+1)^0,c
  1727  000A24  0E00               	movlw	0
  1728  000A26  6E0B               	movwf	(?___ftmul+2)^0,c
  1729  000A28  0012               	return	
  1730  000A2A                     l1394:
  1731  000A2A  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  1732  000A2E  6A10               	clrf	(??___ftmul+1)^0,c
  1733  000A30  6A11               	clrf	(??___ftmul+2)^0,c
  1734  000A32  340D               	rlcf	(___ftmul@f2+1)^0,w,c
  1735  000A34  360F               	rlcf	??___ftmul^0,f,c
  1736  000A36  E301               	bnc	u1031
  1737  000A38  8010               	bsf	(??___ftmul+1)^0,0,c
  1738  000A3A                     u1031:
  1739  000A3A  500F               	movf	??___ftmul^0,w,c
  1740  000A3C  6E17               	movwf	___ftmul@sign^0,c
  1741  000A3E  5017               	movf	___ftmul@sign^0,w,c
  1742  000A40  A4D8               	btfss	status,2,c
  1743  000A42  D007               	goto	l1400
  1744  000A44  0E00               	movlw	0
  1745  000A46  6E09               	movwf	?___ftmul^0,c
  1746  000A48  0E00               	movlw	0
  1747  000A4A  6E0A               	movwf	(?___ftmul+1)^0,c
  1748  000A4C  0E00               	movlw	0
  1749  000A4E  6E0B               	movwf	(?___ftmul+2)^0,c
  1750  000A50  0012               	return	
  1751  000A52                     l1400:
  1752  000A52  5017               	movf	___ftmul@sign^0,w,c
  1753  000A54  0F7B               	addlw	123
  1754  000A56  2612               	addwf	___ftmul@exp^0,f,c
  1755  000A58  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  1756  000A5C  500E               	movf	(___ftmul@f2+2)^0,w,c
  1757  000A5E  1A17               	xorwf	___ftmul@sign^0,f,c
  1758  000A60  0E80               	movlw	128
  1759  000A62  1617               	andwf	___ftmul@sign^0,f,c
  1760  000A64  8E0A               	bsf	(___ftmul@f1+1)^0,7,c
  1761  000A66  8E0D               	bsf	(___ftmul@f2+1)^0,7,c
  1762  000A68  0EFF               	movlw	255
  1763  000A6A  160C               	andwf	___ftmul@f2^0,f,c
  1764  000A6C  0EFF               	movlw	255
  1765  000A6E  160D               	andwf	(___ftmul@f2+1)^0,f,c
  1766  000A70  0E00               	movlw	0
  1767  000A72  160E               	andwf	(___ftmul@f2+2)^0,f,c
  1768  000A74  0E00               	movlw	0
  1769  000A76  6E13               	movwf	___ftmul@f3_as_product^0,c
  1770  000A78  0E00               	movlw	0
  1771  000A7A  6E14               	movwf	(___ftmul@f3_as_product+1)^0,c
  1772  000A7C  0E00               	movlw	0
  1773  000A7E  6E15               	movwf	(___ftmul@f3_as_product+2)^0,c
  1774  000A80  0E07               	movlw	7
  1775  000A82  6E16               	movwf	___ftmul@cntr^0,c
  1776  000A84                     l1414:
  1777  000A84  A009               	btfss	___ftmul@f1^0,0,c
  1778  000A86  D006               	goto	l1418
  1779  000A88  500C               	movf	___ftmul@f2^0,w,c
  1780  000A8A  2613               	addwf	___ftmul@f3_as_product^0,f,c
  1781  000A8C  500D               	movf	(___ftmul@f2+1)^0,w,c
  1782  000A8E  2214               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  1783  000A90  500E               	movf	(___ftmul@f2+2)^0,w,c
  1784  000A92  2215               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  1785  000A94                     l1418:
  1786  000A94  90D8               	bcf	status,0,c
  1787  000A96  320B               	rrcf	(___ftmul@f1+2)^0,f,c
  1788  000A98  320A               	rrcf	(___ftmul@f1+1)^0,f,c
  1789  000A9A  3209               	rrcf	___ftmul@f1^0,f,c
  1790  000A9C  90D8               	bcf	status,0,c
  1791  000A9E  360C               	rlcf	___ftmul@f2^0,f,c
  1792  000AA0  360D               	rlcf	(___ftmul@f2+1)^0,f,c
  1793  000AA2  360E               	rlcf	(___ftmul@f2+2)^0,f,c
  1794  000AA4  2E16               	decfsz	___ftmul@cntr^0,f,c
  1795  000AA6  D7EE               	goto	l1414
  1796  000AA8  0E09               	movlw	9
  1797  000AAA  6E16               	movwf	___ftmul@cntr^0,c
  1798  000AAC                     l1424:
  1799  000AAC  A009               	btfss	___ftmul@f1^0,0,c
  1800  000AAE  D006               	goto	l1428
  1801  000AB0  500C               	movf	___ftmul@f2^0,w,c
  1802  000AB2  2613               	addwf	___ftmul@f3_as_product^0,f,c
  1803  000AB4  500D               	movf	(___ftmul@f2+1)^0,w,c
  1804  000AB6  2214               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  1805  000AB8  500E               	movf	(___ftmul@f2+2)^0,w,c
  1806  000ABA  2215               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  1807  000ABC                     l1428:
  1808  000ABC  90D8               	bcf	status,0,c
  1809  000ABE  320B               	rrcf	(___ftmul@f1+2)^0,f,c
  1810  000AC0  320A               	rrcf	(___ftmul@f1+1)^0,f,c
  1811  000AC2  3209               	rrcf	___ftmul@f1^0,f,c
  1812  000AC4  90D8               	bcf	status,0,c
  1813  000AC6  3215               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  1814  000AC8  3214               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  1815  000ACA  3213               	rrcf	___ftmul@f3_as_product^0,f,c
  1816  000ACC  2E16               	decfsz	___ftmul@cntr^0,f,c
  1817  000ACE  D7EE               	goto	l1424
  1818  000AD0  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  1819  000AD4  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1820  000AD8  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1821  000ADC  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  1822  000AE0  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  1823  000AE4  ECC4  F006         	call	___ftpack	;wreg free
  1824  000AE8  C001  F009         	movff	?___ftpack,?___ftmul
  1825  000AEC  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  1826  000AF0  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  1827  000AF4  0012               	return		;funcret
  1828  000AF6                     __end_of___ftmul:
  1829                           	opt callstack 0
  1830                           
  1831 ;; *************** function ___ftsub *****************
  1832 ;; Defined at:
  1833 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftsub.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  f1              3   43[COMRAM] float 
  1836 ;;  f2              3   46[COMRAM] float 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;		None
  1839 ;; Return value:  Size  Location     Type
  1840 ;;                  3   43[COMRAM] float 
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1848 ;;      Params:         6       0       0       0       0       0       0
  1849 ;;      Locals:         0       0       0       0       0       0       0
  1850 ;;      Temps:          0       0       0       0       0       0       0
  1851 ;;      Totals:         6       0       0       0       0       0       0
  1852 ;;Total ram usage:        6 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    2
  1855 ;; This function calls:
  1856 ;;		___ftadd
  1857 ;; This function is called by:
  1858 ;;		_sin
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           	psect	text12
  1863  0011AE                     __ptext12:
  1864                           	opt callstack 0
  1865  0011AE                     ___ftsub:
  1866                           	opt callstack 25
  1867                           
  1868                           ;incstack = 0
  1869  0011AE  502F               	movf	___ftsub@f2^0,w,c
  1870  0011B0  1030               	iorwf	(___ftsub@f2+1)^0,w,c
  1871  0011B2  1031               	iorwf	(___ftsub@f2+2)^0,w,c
  1872  0011B4  B4D8               	btfsc	status,2,c
  1873  0011B6  D006               	goto	l1566
  1874  0011B8  0E00               	movlw	0
  1875  0011BA  1A2F               	xorwf	___ftsub@f2^0,f,c
  1876  0011BC  0E00               	movlw	0
  1877  0011BE  1A30               	xorwf	(___ftsub@f2+1)^0,f,c
  1878  0011C0  0E80               	movlw	128
  1879  0011C2  1A31               	xorwf	(___ftsub@f2+2)^0,f,c
  1880  0011C4                     l1566:
  1881  0011C4  C02C  F018         	movff	___ftsub@f1,___ftadd@f1
  1882  0011C8  C02D  F019         	movff	___ftsub@f1+1,___ftadd@f1+1
  1883  0011CC  C02E  F01A         	movff	___ftsub@f1+2,___ftadd@f1+2
  1884  0011D0  C02F  F01B         	movff	___ftsub@f2,___ftadd@f2
  1885  0011D4  C030  F01C         	movff	___ftsub@f2+1,___ftadd@f2+1
  1886  0011D8  C031  F01D         	movff	___ftsub@f2+2,___ftadd@f2+2
  1887  0011DC  EC2D  F004         	call	___ftadd	;wreg free
  1888  0011E0  C018  F02C         	movff	?___ftadd,?___ftsub
  1889  0011E4  C019  F02D         	movff	?___ftadd+1,?___ftsub+1
  1890  0011E8  C01A  F02E         	movff	?___ftadd+2,?___ftsub+2
  1891  0011EC  0012               	return		;funcret
  1892  0011EE                     __end_of___ftsub:
  1893                           	opt callstack 0
  1894                           
  1895 ;; *************** function ___ftadd *****************
  1896 ;; Defined at:
  1897 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftadd.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  f1              3   23[COMRAM] float 
  1900 ;;  f2              3   26[COMRAM] float 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  exp1            1   34[COMRAM] unsigned char 
  1903 ;;  exp2            1   33[COMRAM] unsigned char 
  1904 ;;  sign            1   32[COMRAM] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  3   23[COMRAM] float 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1914 ;;      Params:         6       0       0       0       0       0       0
  1915 ;;      Locals:         3       0       0       0       0       0       0
  1916 ;;      Temps:          3       0       0       0       0       0       0
  1917 ;;      Totals:        12       0       0       0       0       0       0
  1918 ;;Total ram usage:       12 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    1
  1921 ;; This function calls:
  1922 ;;		___ftpack
  1923 ;; This function is called by:
  1924 ;;		___ftsub
  1925 ;;		_cos
  1926 ;;		_eval_poly
  1927 ;;		_floor
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text13
  1932  00085A                     __ptext13:
  1933                           	opt callstack 0
  1934  00085A                     ___ftadd:
  1935                           	opt callstack 25
  1936                           
  1937                           ;incstack = 0
  1938  00085A  C01A  F01E         	movff	___ftadd@f1+2,??___ftadd
  1939  00085E  6A1F               	clrf	(??___ftadd+1)^0,c
  1940  000860  6A20               	clrf	(??___ftadd+2)^0,c
  1941  000862  3419               	rlcf	(___ftadd@f1+1)^0,w,c
  1942  000864  361E               	rlcf	??___ftadd^0,f,c
  1943  000866  E301               	bnc	u801
  1944  000868  801F               	bsf	(??___ftadd+1)^0,0,c
  1945  00086A                     u801:
  1946  00086A  501E               	movf	??___ftadd^0,w,c
  1947  00086C  6E23               	movwf	___ftadd@exp1^0,c
  1948  00086E  C01D  F01E         	movff	___ftadd@f2+2,??___ftadd
  1949  000872  6A1F               	clrf	(??___ftadd+1)^0,c
  1950  000874  6A20               	clrf	(??___ftadd+2)^0,c
  1951  000876  341C               	rlcf	(___ftadd@f2+1)^0,w,c
  1952  000878  361E               	rlcf	??___ftadd^0,f,c
  1953  00087A  E301               	bnc	u811
  1954  00087C  801F               	bsf	(??___ftadd+1)^0,0,c
  1955  00087E                     u811:
  1956  00087E  501E               	movf	??___ftadd^0,w,c
  1957  000880  6E22               	movwf	___ftadd@exp2^0,c
  1958  000882  5023               	movf	___ftadd@exp1^0,w,c
  1959  000884  B4D8               	btfsc	status,2,c
  1960  000886  D00A               	goto	u840
  1961  000888  5022               	movf	___ftadd@exp2^0,w,c
  1962  00088A  5C23               	subwf	___ftadd@exp1^0,w,c
  1963  00088C  B0D8               	btfsc	status,0,c
  1964  00088E  D00D               	goto	l1326
  1965  000890  5023               	movf	___ftadd@exp1^0,w,c
  1966  000892  5C22               	subwf	___ftadd@exp2^0,w,c
  1967  000894  6E1E               	movwf	??___ftadd^0,c
  1968  000896  0E18               	movlw	24
  1969  000898  641E               	cpfsgt	??___ftadd^0,c
  1970  00089A  D007               	goto	l1326
  1971  00089C                     u840:
  1972  00089C  C01B  F018         	movff	___ftadd@f2,?___ftadd
  1973  0008A0  C01C  F019         	movff	___ftadd@f2+1,?___ftadd+1
  1974  0008A4  C01D  F01A         	movff	___ftadd@f2+2,?___ftadd+2
  1975  0008A8  0012               	return	
  1976  0008AA                     l1326:
  1977  0008AA  5022               	movf	___ftadd@exp2^0,w,c
  1978  0008AC  B4D8               	btfsc	status,2,c
  1979  0008AE  D00A               	goto	u870
  1980  0008B0  5023               	movf	___ftadd@exp1^0,w,c
  1981  0008B2  5C22               	subwf	___ftadd@exp2^0,w,c
  1982  0008B4  B0D8               	btfsc	status,0,c
  1983  0008B6  D00D               	goto	l1332
  1984  0008B8  5022               	movf	___ftadd@exp2^0,w,c
  1985  0008BA  5C23               	subwf	___ftadd@exp1^0,w,c
  1986  0008BC  6E1E               	movwf	??___ftadd^0,c
  1987  0008BE  0E18               	movlw	24
  1988  0008C0  641E               	cpfsgt	??___ftadd^0,c
  1989  0008C2  D007               	goto	l1332
  1990  0008C4                     u870:
  1991  0008C4  C018  F018         	movff	___ftadd@f1,?___ftadd
  1992  0008C8  C019  F019         	movff	___ftadd@f1+1,?___ftadd+1
  1993  0008CC  C01A  F01A         	movff	___ftadd@f1+2,?___ftadd+2
  1994  0008D0  0012               	return	
  1995  0008D2                     l1332:
  1996  0008D2  0E06               	movlw	6
  1997  0008D4  6E21               	movwf	___ftadd@sign^0,c
  1998  0008D6  BE1A               	btfsc	(___ftadd@f1+2)^0,7,c
  1999  0008D8  8E21               	bsf	___ftadd@sign^0,7,c
  2000  0008DA  BE1D               	btfsc	(___ftadd@f2+2)^0,7,c
  2001  0008DC  8C21               	bsf	___ftadd@sign^0,6,c
  2002  0008DE  8E19               	bsf	(___ftadd@f1+1)^0,7,c
  2003  0008E0  0EFF               	movlw	255
  2004  0008E2  1618               	andwf	___ftadd@f1^0,f,c
  2005  0008E4  0EFF               	movlw	255
  2006  0008E6  1619               	andwf	(___ftadd@f1+1)^0,f,c
  2007  0008E8  0E00               	movlw	0
  2008  0008EA  161A               	andwf	(___ftadd@f1+2)^0,f,c
  2009  0008EC  8E1C               	bsf	(___ftadd@f2+1)^0,7,c
  2010  0008EE  0EFF               	movlw	255
  2011  0008F0  161B               	andwf	___ftadd@f2^0,f,c
  2012  0008F2  0EFF               	movlw	255
  2013  0008F4  161C               	andwf	(___ftadd@f2+1)^0,f,c
  2014  0008F6  0E00               	movlw	0
  2015  0008F8  161D               	andwf	(___ftadd@f2+2)^0,f,c
  2016  0008FA  5022               	movf	___ftadd@exp2^0,w,c
  2017  0008FC  5C23               	subwf	___ftadd@exp1^0,w,c
  2018  0008FE  B0D8               	btfsc	status,0,c
  2019  000900  D01B               	goto	l1358
  2020  000902                     u900:
  2021  000902  90D8               	bcf	status,0,c
  2022  000904  361B               	rlcf	___ftadd@f2^0,f,c
  2023  000906  361C               	rlcf	(___ftadd@f2+1)^0,f,c
  2024  000908  361D               	rlcf	(___ftadd@f2+2)^0,f,c
  2025  00090A  0622               	decf	___ftadd@exp2^0,f,c
  2026  00090C  5023               	movf	___ftadd@exp1^0,w,c
  2027  00090E  1822               	xorwf	___ftadd@exp2^0,w,c
  2028  000910  B4D8               	btfsc	status,2,c
  2029  000912  D00D               	goto	l1356
  2030  000914  0621               	decf	___ftadd@sign^0,f,c
  2031  000916  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2032  00091A  0E07               	movlw	7
  2033  00091C  161E               	andwf	??___ftadd^0,f,c
  2034  00091E  B4D8               	btfsc	status,2,c
  2035  000920  D006               	goto	l1356
  2036  000922  D7EF               	goto	u900
  2037  000924                     l1354:
  2038  000924  90D8               	bcf	status,0,c
  2039  000926  321A               	rrcf	(___ftadd@f1+2)^0,f,c
  2040  000928  3219               	rrcf	(___ftadd@f1+1)^0,f,c
  2041  00092A  3218               	rrcf	___ftadd@f1^0,f,c
  2042  00092C  2A23               	incf	___ftadd@exp1^0,f,c
  2043  00092E                     l1356:
  2044  00092E  5022               	movf	___ftadd@exp2^0,w,c
  2045  000930  1823               	xorwf	___ftadd@exp1^0,w,c
  2046  000932  B4D8               	btfsc	status,2,c
  2047  000934  D01F               	goto	u970
  2048  000936  D7F6               	goto	l1354
  2049  000938                     l1358:
  2050  000938  5023               	movf	___ftadd@exp1^0,w,c
  2051  00093A  5C22               	subwf	___ftadd@exp2^0,w,c
  2052  00093C  B0D8               	btfsc	status,0,c
  2053  00093E  D01A               	goto	u970
  2054  000940                     u940:
  2055  000940  90D8               	bcf	status,0,c
  2056  000942  3618               	rlcf	___ftadd@f1^0,f,c
  2057  000944  3619               	rlcf	(___ftadd@f1+1)^0,f,c
  2058  000946  361A               	rlcf	(___ftadd@f1+2)^0,f,c
  2059  000948  0623               	decf	___ftadd@exp1^0,f,c
  2060  00094A  5023               	movf	___ftadd@exp1^0,w,c
  2061  00094C  1822               	xorwf	___ftadd@exp2^0,w,c
  2062  00094E  B4D8               	btfsc	status,2,c
  2063  000950  D00D               	goto	l1368
  2064  000952  0621               	decf	___ftadd@sign^0,f,c
  2065  000954  C021  F01E         	movff	___ftadd@sign,??___ftadd
  2066  000958  0E07               	movlw	7
  2067  00095A  161E               	andwf	??___ftadd^0,f,c
  2068  00095C  B4D8               	btfsc	status,2,c
  2069  00095E  D006               	goto	l1368
  2070  000960  D7EF               	goto	u940
  2071  000962                     l1366:
  2072  000962  90D8               	bcf	status,0,c
  2073  000964  321D               	rrcf	(___ftadd@f2+2)^0,f,c
  2074  000966  321C               	rrcf	(___ftadd@f2+1)^0,f,c
  2075  000968  321B               	rrcf	___ftadd@f2^0,f,c
  2076  00096A  2A22               	incf	___ftadd@exp2^0,f,c
  2077  00096C                     l1368:
  2078  00096C  5022               	movf	___ftadd@exp2^0,w,c
  2079  00096E  1823               	xorwf	___ftadd@exp1^0,w,c
  2080  000970  A4D8               	btfss	status,2,c
  2081  000972  D7F7               	goto	l1366
  2082  000974                     u970:
  2083  000974  AE21               	btfss	___ftadd@sign^0,7,c
  2084  000976  D00C               	goto	l354
  2085  000978  0EFF               	movlw	255
  2086  00097A  1A18               	xorwf	___ftadd@f1^0,f,c
  2087  00097C  0EFF               	movlw	255
  2088  00097E  1A19               	xorwf	(___ftadd@f1+1)^0,f,c
  2089  000980  0EFF               	movlw	255
  2090  000982  1A1A               	xorwf	(___ftadd@f1+2)^0,f,c
  2091  000984  0E01               	movlw	1
  2092  000986  2618               	addwf	___ftadd@f1^0,f,c
  2093  000988  0E00               	movlw	0
  2094  00098A  2219               	addwfc	(___ftadd@f1+1)^0,f,c
  2095  00098C  0E00               	movlw	0
  2096  00098E  221A               	addwfc	(___ftadd@f1+2)^0,f,c
  2097  000990                     l354:
  2098  000990  AC21               	btfss	___ftadd@sign^0,6,c
  2099  000992  D00C               	goto	l1374
  2100  000994  0EFF               	movlw	255
  2101  000996  1A1B               	xorwf	___ftadd@f2^0,f,c
  2102  000998  0EFF               	movlw	255
  2103  00099A  1A1C               	xorwf	(___ftadd@f2+1)^0,f,c
  2104  00099C  0EFF               	movlw	255
  2105  00099E  1A1D               	xorwf	(___ftadd@f2+2)^0,f,c
  2106  0009A0  0E01               	movlw	1
  2107  0009A2  261B               	addwf	___ftadd@f2^0,f,c
  2108  0009A4  0E00               	movlw	0
  2109  0009A6  221C               	addwfc	(___ftadd@f2+1)^0,f,c
  2110  0009A8  0E00               	movlw	0
  2111  0009AA  221D               	addwfc	(___ftadd@f2+2)^0,f,c
  2112  0009AC                     l1374:
  2113  0009AC  0E00               	movlw	0
  2114  0009AE  6E21               	movwf	___ftadd@sign^0,c
  2115  0009B0  5018               	movf	___ftadd@f1^0,w,c
  2116  0009B2  261B               	addwf	___ftadd@f2^0,f,c
  2117  0009B4  5019               	movf	(___ftadd@f1+1)^0,w,c
  2118  0009B6  221C               	addwfc	(___ftadd@f2+1)^0,f,c
  2119  0009B8  501A               	movf	(___ftadd@f1+2)^0,w,c
  2120  0009BA  221D               	addwfc	(___ftadd@f2+2)^0,f,c
  2121  0009BC  AE1D               	btfss	(___ftadd@f2+2)^0,7,c
  2122  0009BE  D00E               	goto	l1384
  2123  0009C0  0EFF               	movlw	255
  2124  0009C2  1A1B               	xorwf	___ftadd@f2^0,f,c
  2125  0009C4  0EFF               	movlw	255
  2126  0009C6  1A1C               	xorwf	(___ftadd@f2+1)^0,f,c
  2127  0009C8  0EFF               	movlw	255
  2128  0009CA  1A1D               	xorwf	(___ftadd@f2+2)^0,f,c
  2129  0009CC  0E01               	movlw	1
  2130  0009CE  261B               	addwf	___ftadd@f2^0,f,c
  2131  0009D0  0E00               	movlw	0
  2132  0009D2  221C               	addwfc	(___ftadd@f2+1)^0,f,c
  2133  0009D4  0E00               	movlw	0
  2134  0009D6  221D               	addwfc	(___ftadd@f2+2)^0,f,c
  2135  0009D8  0E01               	movlw	1
  2136  0009DA  6E21               	movwf	___ftadd@sign^0,c
  2137  0009DC                     l1384:
  2138  0009DC  C01B  F001         	movff	___ftadd@f2,___ftpack@arg
  2139  0009E0  C01C  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2140  0009E4  C01D  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2141  0009E8  C023  F004         	movff	___ftadd@exp1,___ftpack@exp
  2142  0009EC  C021  F005         	movff	___ftadd@sign,___ftpack@sign
  2143  0009F0  ECC4  F006         	call	___ftpack	;wreg free
  2144  0009F4  C001  F018         	movff	?___ftpack,?___ftadd
  2145  0009F8  C002  F019         	movff	?___ftpack+1,?___ftadd+1
  2146  0009FC  C003  F01A         	movff	?___ftpack+2,?___ftadd+2
  2147  000A00  0012               	return		;funcret
  2148  000A02                     __end_of___ftadd:
  2149                           	opt callstack 0
  2150                           
  2151 ;; *************** function ___ftneg *****************
  2152 ;; Defined at:
  2153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftneg.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  f1              3    0[COMRAM] float 
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;                  3    0[COMRAM] float 
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2167 ;;      Params:         3       0       0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0       0       0
  2169 ;;      Temps:          0       0       0       0       0       0       0
  2170 ;;      Totals:         3       0       0       0       0       0       0
  2171 ;;Total ram usage:        3 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_sin
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text14
  2181  0011EE                     __ptext14:
  2182                           	opt callstack 0
  2183  0011EE                     ___ftneg:
  2184                           	opt callstack 27
  2185                           
  2186                           ;incstack = 0
  2187  0011EE  5001               	movf	___ftneg@f1^0,w,c
  2188  0011F0  1002               	iorwf	(___ftneg@f1+1)^0,w,c
  2189  0011F2  1003               	iorwf	(___ftneg@f1+2)^0,w,c
  2190  0011F4  B4D8               	btfsc	status,2,c
  2191  0011F6  D006               	goto	l387
  2192  0011F8  0E00               	movlw	0
  2193  0011FA  1A01               	xorwf	___ftneg@f1^0,f,c
  2194  0011FC  0E00               	movlw	0
  2195  0011FE  1A02               	xorwf	(___ftneg@f1+1)^0,f,c
  2196  001200  0E80               	movlw	128
  2197  001202  1A03               	xorwf	(___ftneg@f1+2)^0,f,c
  2198  001204                     l387:
  2199  001204  C001  F001         	movff	___ftneg@f1,?___ftneg
  2200  001208  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  2201  00120C  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  2202  001210  0012               	return		;funcret
  2203  001212                     __end_of___ftneg:
  2204                           	opt callstack 0
  2205                           
  2206 ;; *************** function ___ftdiv *****************
  2207 ;; Defined at:
  2208 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ftdiv.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  f1              3   45[COMRAM] float 
  2211 ;;  f2              3   48[COMRAM] float 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  f3              3   55[COMRAM] float 
  2214 ;;  sign            1   59[COMRAM] unsigned char 
  2215 ;;  exp             1   58[COMRAM] unsigned char 
  2216 ;;  cntr            1   54[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  3   45[COMRAM] float 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2226 ;;      Params:         6       0       0       0       0       0       0
  2227 ;;      Locals:         6       0       0       0       0       0       0
  2228 ;;      Temps:          3       0       0       0       0       0       0
  2229 ;;      Totals:        15       0       0       0       0       0       0
  2230 ;;Total ram usage:       15 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    1
  2233 ;; This function calls:
  2234 ;;		___ftpack
  2235 ;; This function is called by:
  2236 ;;		_sin
  2237 ;;		_tan
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           	psect	text15
  2242  000AF6                     __ptext15:
  2243                           	opt callstack 0
  2244  000AF6                     ___ftdiv:
  2245                           	opt callstack 26
  2246                           
  2247                           ;incstack = 0
  2248  000AF6  C030  F034         	movff	___ftdiv@f1+2,??___ftdiv
  2249  000AFA  6A35               	clrf	(??___ftdiv+1)^0,c
  2250  000AFC  6A36               	clrf	(??___ftdiv+2)^0,c
  2251  000AFE  342F               	rlcf	(___ftdiv@f1+1)^0,w,c
  2252  000B00  3634               	rlcf	??___ftdiv^0,f,c
  2253  000B02  E301               	bnc	u1201
  2254  000B04  8035               	bsf	(??___ftdiv+1)^0,0,c
  2255  000B06                     u1201:
  2256  000B06  5034               	movf	??___ftdiv^0,w,c
  2257  000B08  6E3B               	movwf	___ftdiv@exp^0,c
  2258  000B0A  503B               	movf	___ftdiv@exp^0,w,c
  2259  000B0C  A4D8               	btfss	status,2,c
  2260  000B0E  D007               	goto	l1522
  2261  000B10  0E00               	movlw	0
  2262  000B12  6E2E               	movwf	?___ftdiv^0,c
  2263  000B14  0E00               	movlw	0
  2264  000B16  6E2F               	movwf	(?___ftdiv+1)^0,c
  2265  000B18  0E00               	movlw	0
  2266  000B1A  6E30               	movwf	(?___ftdiv+2)^0,c
  2267  000B1C  0012               	return	
  2268  000B1E                     l1522:
  2269  000B1E  C033  F034         	movff	___ftdiv@f2+2,??___ftdiv
  2270  000B22  6A35               	clrf	(??___ftdiv+1)^0,c
  2271  000B24  6A36               	clrf	(??___ftdiv+2)^0,c
  2272  000B26  3432               	rlcf	(___ftdiv@f2+1)^0,w,c
  2273  000B28  3634               	rlcf	??___ftdiv^0,f,c
  2274  000B2A  E301               	bnc	u1221
  2275  000B2C  8035               	bsf	(??___ftdiv+1)^0,0,c
  2276  000B2E                     u1221:
  2277  000B2E  5034               	movf	??___ftdiv^0,w,c
  2278  000B30  6E3C               	movwf	___ftdiv@sign^0,c
  2279  000B32  503C               	movf	___ftdiv@sign^0,w,c
  2280  000B34  A4D8               	btfss	status,2,c
  2281  000B36  D007               	goto	l1528
  2282  000B38  0E00               	movlw	0
  2283  000B3A  6E2E               	movwf	?___ftdiv^0,c
  2284  000B3C  0E00               	movlw	0
  2285  000B3E  6E2F               	movwf	(?___ftdiv+1)^0,c
  2286  000B40  0E00               	movlw	0
  2287  000B42  6E30               	movwf	(?___ftdiv+2)^0,c
  2288  000B44  0012               	return	
  2289  000B46                     l1528:
  2290  000B46  0E00               	movlw	0
  2291  000B48  6E38               	movwf	___ftdiv@f3^0,c
  2292  000B4A  0E00               	movlw	0
  2293  000B4C  6E39               	movwf	(___ftdiv@f3+1)^0,c
  2294  000B4E  0E00               	movlw	0
  2295  000B50  6E3A               	movwf	(___ftdiv@f3+2)^0,c
  2296  000B52  503C               	movf	___ftdiv@sign^0,w,c
  2297  000B54  0F89               	addlw	137
  2298  000B56  5E3B               	subwf	___ftdiv@exp^0,f,c
  2299  000B58  C030  F03C         	movff	___ftdiv@f1+2,___ftdiv@sign
  2300  000B5C  5033               	movf	(___ftdiv@f2+2)^0,w,c
  2301  000B5E  1A3C               	xorwf	___ftdiv@sign^0,f,c
  2302  000B60  0E80               	movlw	128
  2303  000B62  163C               	andwf	___ftdiv@sign^0,f,c
  2304  000B64  8E2F               	bsf	(___ftdiv@f1+1)^0,7,c
  2305  000B66  0EFF               	movlw	255
  2306  000B68  162E               	andwf	___ftdiv@f1^0,f,c
  2307  000B6A  0EFF               	movlw	255
  2308  000B6C  162F               	andwf	(___ftdiv@f1+1)^0,f,c
  2309  000B6E  0E00               	movlw	0
  2310  000B70  1630               	andwf	(___ftdiv@f1+2)^0,f,c
  2311  000B72  8E32               	bsf	(___ftdiv@f2+1)^0,7,c
  2312  000B74  0EFF               	movlw	255
  2313  000B76  1631               	andwf	___ftdiv@f2^0,f,c
  2314  000B78  0EFF               	movlw	255
  2315  000B7A  1632               	andwf	(___ftdiv@f2+1)^0,f,c
  2316  000B7C  0E00               	movlw	0
  2317  000B7E  1633               	andwf	(___ftdiv@f2+2)^0,f,c
  2318  000B80  0E18               	movlw	24
  2319  000B82  6E37               	movwf	___ftdiv@cntr^0,c
  2320  000B84                     l1548:
  2321  000B84  90D8               	bcf	status,0,c
  2322  000B86  3638               	rlcf	___ftdiv@f3^0,f,c
  2323  000B88  3639               	rlcf	(___ftdiv@f3+1)^0,f,c
  2324  000B8A  363A               	rlcf	(___ftdiv@f3+2)^0,f,c
  2325  000B8C  5031               	movf	___ftdiv@f2^0,w,c
  2326  000B8E  5C2E               	subwf	___ftdiv@f1^0,w,c
  2327  000B90  5032               	movf	(___ftdiv@f2+1)^0,w,c
  2328  000B92  582F               	subwfb	(___ftdiv@f1+1)^0,w,c
  2329  000B94  5033               	movf	(___ftdiv@f2+2)^0,w,c
  2330  000B96  5830               	subwfb	(___ftdiv@f1+2)^0,w,c
  2331  000B98  A0D8               	btfss	status,0,c
  2332  000B9A  D007               	goto	l365
  2333  000B9C  5031               	movf	___ftdiv@f2^0,w,c
  2334  000B9E  5E2E               	subwf	___ftdiv@f1^0,f,c
  2335  000BA0  5032               	movf	(___ftdiv@f2+1)^0,w,c
  2336  000BA2  5A2F               	subwfb	(___ftdiv@f1+1)^0,f,c
  2337  000BA4  5033               	movf	(___ftdiv@f2+2)^0,w,c
  2338  000BA6  5A30               	subwfb	(___ftdiv@f1+2)^0,f,c
  2339  000BA8  8038               	bsf	___ftdiv@f3^0,0,c
  2340  000BAA                     l365:
  2341  000BAA  90D8               	bcf	status,0,c
  2342  000BAC  362E               	rlcf	___ftdiv@f1^0,f,c
  2343  000BAE  362F               	rlcf	(___ftdiv@f1+1)^0,f,c
  2344  000BB0  3630               	rlcf	(___ftdiv@f1+2)^0,f,c
  2345  000BB2  2E37               	decfsz	___ftdiv@cntr^0,f,c
  2346  000BB4  D7E7               	goto	l1548
  2347  000BB6  C038  F001         	movff	___ftdiv@f3,___ftpack@arg
  2348  000BBA  C039  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2349  000BBE  C03A  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2350  000BC2  C03B  F004         	movff	___ftdiv@exp,___ftpack@exp
  2351  000BC6  C03C  F005         	movff	___ftdiv@sign,___ftpack@sign
  2352  000BCA  ECC4  F006         	call	___ftpack	;wreg free
  2353  000BCE  C001  F02E         	movff	?___ftpack,?___ftdiv
  2354  000BD2  C002  F02F         	movff	?___ftpack+1,?___ftdiv+1
  2355  000BD6  C003  F030         	movff	?___ftpack+2,?___ftdiv+2
  2356  000BDA  0012               	return		;funcret
  2357  000BDC                     __end_of___ftdiv:
  2358                           	opt callstack 0
  2359                           
  2360 ;; *************** function ___ftpack *****************
  2361 ;; Defined at:
  2362 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\float.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  arg             3    0[COMRAM] unsigned um
  2365 ;;  exp             1    3[COMRAM] unsigned char 
  2366 ;;  sign            1    4[COMRAM] unsigned char 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;		None
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  3    0[COMRAM] float 
  2371 ;; Registers used:
  2372 ;;		wreg, status,2, status,0
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2378 ;;      Params:         5       0       0       0       0       0       0
  2379 ;;      Locals:         0       0       0       0       0       0       0
  2380 ;;      Temps:          3       0       0       0       0       0       0
  2381 ;;      Totals:         8       0       0       0       0       0       0
  2382 ;;Total ram usage:        8 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		___altoft
  2388 ;;		___ftadd
  2389 ;;		___ftdiv
  2390 ;;		___ftmul
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text16
  2395  000D88                     __ptext16:
  2396                           	opt callstack 0
  2397  000D88                     ___ftpack:
  2398                           	opt callstack 25
  2399                           
  2400                           ;incstack = 0
  2401  000D88  5004               	movf	___ftpack@exp^0,w,c
  2402  000D8A  B4D8               	btfsc	status,2,c
  2403  000D8C  D005               	goto	u710
  2404  000D8E  5001               	movf	___ftpack@arg^0,w,c
  2405  000D90  1002               	iorwf	(___ftpack@arg+1)^0,w,c
  2406  000D92  1003               	iorwf	(___ftpack@arg+2)^0,w,c
  2407  000D94  A4D8               	btfss	status,2,c
  2408  000D96  D00C               	goto	l1276
  2409  000D98                     u710:
  2410  000D98  0E00               	movlw	0
  2411  000D9A  6E01               	movwf	?___ftpack^0,c
  2412  000D9C  0E00               	movlw	0
  2413  000D9E  6E02               	movwf	(?___ftpack+1)^0,c
  2414  000DA0  0E00               	movlw	0
  2415  000DA2  6E03               	movwf	(?___ftpack+2)^0,c
  2416  000DA4  0012               	return	
  2417  000DA6                     l1274:
  2418  000DA6  2A04               	incf	___ftpack@exp^0,f,c
  2419  000DA8  90D8               	bcf	status,0,c
  2420  000DAA  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  2421  000DAC  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  2422  000DAE  3201               	rrcf	___ftpack@arg^0,f,c
  2423  000DB0                     l1276:
  2424  000DB0  0E00               	movlw	0
  2425  000DB2  1401               	andwf	___ftpack@arg^0,w,c
  2426  000DB4  6E06               	movwf	??___ftpack^0,c
  2427  000DB6  0E00               	movlw	0
  2428  000DB8  1402               	andwf	(___ftpack@arg+1)^0,w,c
  2429  000DBA  6E07               	movwf	(??___ftpack+1)^0,c
  2430  000DBC  0EFE               	movlw	254
  2431  000DBE  1403               	andwf	(___ftpack@arg+2)^0,w,c
  2432  000DC0  6E08               	movwf	(??___ftpack+2)^0,c
  2433  000DC2  5006               	movf	??___ftpack^0,w,c
  2434  000DC4  1007               	iorwf	(??___ftpack+1)^0,w,c
  2435  000DC6  1008               	iorwf	(??___ftpack+2)^0,w,c
  2436  000DC8  B4D8               	btfsc	status,2,c
  2437  000DCA  D00C               	goto	l1282
  2438  000DCC  D7EC               	goto	l1274
  2439  000DCE                     l1278:
  2440  000DCE  2A04               	incf	___ftpack@exp^0,f,c
  2441  000DD0  0E01               	movlw	1
  2442  000DD2  2601               	addwf	___ftpack@arg^0,f,c
  2443  000DD4  0E00               	movlw	0
  2444  000DD6  2202               	addwfc	(___ftpack@arg+1)^0,f,c
  2445  000DD8  0E00               	movlw	0
  2446  000DDA  2203               	addwfc	(___ftpack@arg+2)^0,f,c
  2447  000DDC  90D8               	bcf	status,0,c
  2448  000DDE  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  2449  000DE0  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  2450  000DE2  3201               	rrcf	___ftpack@arg^0,f,c
  2451  000DE4                     l1282:
  2452  000DE4  0E00               	movlw	0
  2453  000DE6  1401               	andwf	___ftpack@arg^0,w,c
  2454  000DE8  6E06               	movwf	??___ftpack^0,c
  2455  000DEA  0E00               	movlw	0
  2456  000DEC  1402               	andwf	(___ftpack@arg+1)^0,w,c
  2457  000DEE  6E07               	movwf	(??___ftpack+1)^0,c
  2458  000DF0  0EFF               	movlw	255
  2459  000DF2  1403               	andwf	(___ftpack@arg+2)^0,w,c
  2460  000DF4  6E08               	movwf	(??___ftpack+2)^0,c
  2461  000DF6  5006               	movf	??___ftpack^0,w,c
  2462  000DF8  1007               	iorwf	(??___ftpack+1)^0,w,c
  2463  000DFA  1008               	iorwf	(??___ftpack+2)^0,w,c
  2464  000DFC  B4D8               	btfsc	status,2,c
  2465  000DFE  D006               	goto	l1286
  2466  000E00  D7E6               	goto	l1278
  2467  000E02                     l1284:
  2468  000E02  0604               	decf	___ftpack@exp^0,f,c
  2469  000E04  90D8               	bcf	status,0,c
  2470  000E06  3601               	rlcf	___ftpack@arg^0,f,c
  2471  000E08  3602               	rlcf	(___ftpack@arg+1)^0,f,c
  2472  000E0A  3603               	rlcf	(___ftpack@arg+2)^0,f,c
  2473  000E0C                     l1286:
  2474  000E0C  BE02               	btfsc	(___ftpack@arg+1)^0,7,c
  2475  000E0E  D003               	goto	u750
  2476  000E10  0E02               	movlw	2
  2477  000E12  6004               	cpfslt	___ftpack@exp^0,c
  2478  000E14  D7F6               	goto	l1284
  2479  000E16                     u750:
  2480  000E16  A004               	btfss	___ftpack@exp^0,0,c
  2481  000E18  9E02               	bcf	(___ftpack@arg+1)^0,7,c
  2482  000E1A  90D8               	bcf	status,0,c
  2483  000E1C  3204               	rrcf	___ftpack@exp^0,f,c
  2484  000E1E  5004               	movf	___ftpack@exp^0,w,c
  2485  000E20  1203               	iorwf	(___ftpack@arg+2)^0,f,c
  2486  000E22  5005               	movf	___ftpack@sign^0,w,c
  2487  000E24  A4D8               	btfss	status,2,c
  2488  000E26  8E03               	bsf	(___ftpack@arg+2)^0,7,c
  2489  000E28  C001  F001         	movff	___ftpack@arg,?___ftpack
  2490  000E2C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2491  000E30  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2492  000E34  0012               	return		;funcret
  2493  000E36                     __end_of___ftpack:
  2494                           	opt callstack 0
  2495                           
  2496                           	psect	rparam
  2497  0000                     tosu	equ	0xFFF
  2498                           tosh	equ	0xFFE
  2499                           tosl	equ	0xFFD
  2500                           stkptr	equ	0xFFC
  2501                           pclatu	equ	0xFFB
  2502                           pclath	equ	0xFFA
  2503                           pcl	equ	0xFF9
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           indf0	equ	0xFEF
  2511                           postinc0	equ	0xFEE
  2512                           postdec0	equ	0xFED
  2513                           preinc0	equ	0xFEC
  2514                           plusw0	equ	0xFEB
  2515                           fsr0h	equ	0xFEA
  2516                           fsr0l	equ	0xFE9
  2517                           wreg	equ	0xFE8
  2518                           indf1	equ	0xFE7
  2519                           postinc1	equ	0xFE6
  2520                           postdec1	equ	0xFE5
  2521                           preinc1	equ	0xFE4
  2522                           plusw1	equ	0xFE3
  2523                           fsr1h	equ	0xFE2
  2524                           fsr1l	equ	0xFE1
  2525                           bsr	equ	0xFE0
  2526                           indf2	equ	0xFDF
  2527                           postinc2	equ	0xFDE
  2528                           postdec2	equ	0xFDD
  2529                           preinc2	equ	0xFDC
  2530                           plusw2	equ	0xFDB
  2531                           fsr2h	equ	0xFDA
  2532                           fsr2l	equ	0xFD9
  2533                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    27
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     91      93
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(COMRAM[2]), 

    eval_poly@d	PTR const  size(1) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_trigonometry
    _trigonometry->_tan
    _tan->_cos
    _cos->_sin
    _sin->___ftdiv
    _floor->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftsub->_floor
    ___ftadd->___ftmul
    ___ftdiv->_eval_poly

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  149389
                       _trigonometry
 ---------------------------------------------------------------------------------
 (1) _trigonometry                                         3     3      0  149389
                                             88 COMRAM     3     3      0
                                _cos
                                _sin
                                _tan
 ---------------------------------------------------------------------------------
 (2) _tan                                                  9     6      3   76690
                                             79 COMRAM     9     6      3
                            ___ftdiv
                                _cos
                                _sin
 ---------------------------------------------------------------------------------
 (3) _cos                                                  6     3      3   39210
                                             73 COMRAM     6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 13    10      3   33480
                                             60 COMRAM    13    10      3
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3    9387
                                             35 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                6     2      4     360
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     328
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6     744
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3058
                                             15 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           10     4      6    9262
                                             35 COMRAM    10     4      6
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4058
                                              8 COMRAM    15     9      6
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5219
                                             43 COMRAM     6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4570
                                             23 COMRAM    12     6      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     197
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3682
                                             45 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2844
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _trigonometry
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftge
       _sin
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___ftpack
               ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           ___ftpack (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftge
             ___fttol
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___fttol
           _frexp
     _sin
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___ftpack
         ___ftpack (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___fttol
           _frexp
       _eval_poly
         ___ftadd
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul
           ___ftpack
           ___ftpack (ARG)
       _floor
         ___altoft
           ___ftpack
           ___fttol (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         ___fttol
         _frexp
     _tan
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___ftpack (ARG)
       _cos
         ___ftadd
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftge
         _sin
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___ftmul (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul
                 ___ftpack
                 ___ftpack (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             ___ftpack (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             _floor (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___ftmul (ARG)
                   ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftge
               ___fttol
               _frexp
           _eval_poly
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___ftpack
               ___ftpack (ARG)
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftge
             ___fttol
             _frexp
       _sin
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul
               ___ftpack
               ___ftpack (ARG)
         ___ftge
         ___ftmul
           ___ftpack
           ___ftpack (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftge
             ___fttol
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul
             ___ftpack
             ___ftpack (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftge
           ___fttol
           _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5B      5D       1       73.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      15        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Feb 25 16:40:22 2021

           ___altoft@exp 0018            ___altoft@sign 0019             ___ftadd@exp1 0023  
           ___ftadd@exp2 0022             ___ftadd@sign 0021                      l354 0990  
                    l365 0BAA                      l702 076C                      l703 084C  
                    l387 1204                      l726 0CA8                      u710 0D98  
                    u801 086A                      u811 087E                      u900 0902  
                    u750 0E16                      u840 089C                      u940 0940  
                    u870 08C4                      u970 0974                      _cos 0F72  
                    _tan 114C                      _sin 061E    __size_of_trigonometry 00A6  
           ___ftdiv@cntr 0037             ___ftdiv@sign 003C                     l1310 1018  
                   l1400 0A52                     l1312 1024                     l1332 08D2  
                   l1326 08AA                     l1414 0A84                     l1424 0AAC  
                   l1600 0EFE                     l1440 1090                     l1282 0DE4  
                   l1274 0DA6                     l1522 0B1E                     l1354 0924  
                   l1418 0A94                     l1602 0F5C                     l1450 10DE  
                   l1506 10FC                     l1284 0E02                     l1276 0DB0  
                   l1356 092E                     l1428 0ABC                     l1444 10B2  
                   l1460 0CE2                     l1612 0646                     l1286 0E0C  
                   l1278 0DCE                     l1374 09AC                     l1366 0962  
                   l1358 0938                     l1528 0B46                     l1384 09DC  
                   l1368 096C                     l1624 0724                     l1394 0A2A  
                   l1490 0D5A                     l1482 0D46                     l1548 0B84  
                   l1566 11C4                     l1478 0D36                     l1646 0FD8  
                   l1496 0D76                     l1488 0D4E                     l1592 0C2E  
                   l1584 0C06                     l1588 0C14                     ?_cos 004A  
                   ?_tan 0050                     ?_sin 003D                     u1011 0A12  
                   u1101 0CC6                     u1110 0CD0                     u1031 0A3A  
                   u1120 0D00                     u1201 0B06                     u1221 0B2E  
                   u1125 0CF8                     u1160 0D60                     u1340 0720  
                   u1190 1128                     u1350 0722                     u1290 0C20  
                   u1198 112A                     _main 1224             ___ftpack@arg 0001  
                   cos@f 004A             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     tan@x 0050                     sin@f 003D  
                   sin@y 0040                     prodl 000FF3                     start 0000  
           ___ftmul@cntr 0016             ___param_bank 000000             ___ftmul@sign 0017  
           ___fttol@exp1 000F                    ??_cos 004D             ___fttol@lval 000B  
                  ??_tan 0053                    ??_sin 0040             _trigonometry 0E36  
                  ?_main 0001          __end_of___ftadd 0A02          __end_of___ftdiv 0BDC  
        __end_of___ftneg 1212          __end_of___ftmul 0AF6          __end_of___ftsub 11EE  
        __end_of___fttol 0D88       __end_ofsin@coeff_a 0610       __end_ofsin@coeff_b 061C  
                  _floor 0BDC                    _frexp 10E2                    _errno 005C  
          ___ftpack@sign 0005                    sin@x2 0046                    tablat 000FF5  
                  status 000FD8          __initialization 1212             __end_of_main 122C  
                 ??_main 005C            ___fttol@sign1 000A            __activetblptr 000001  
                 ?_floor 0024                   ?_frexp 0001         __end_of___altoft 106E  
       __end_of___ftpack 0E36                   ___ftge 106E                ??___ftadd 001E  
              ??___ftdiv 0034                ??___ftneg 0004                ??___ftmul 000F  
              ??___ftsub 0032                ??___fttol 0005                   floor@i 0027  
                 floor@x 0024    ___ftmul@f3_as_product 0013                   sin@sgn 0049  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1216  
             ___altoft@c 0010               ___ftadd@f1 0018               ___ftadd@f2 001B  
             ___ftge@ff1 0001               ___ftge@ff2 0004             eval_poly@res 002B  
          ___rparam_used 000001               ___ftdiv@f1 002E               ___ftdiv@f2 0031  
             ___ftdiv@f3 0038               ___ftneg@f1 0001               ___ftmul@f1 0009  
             ___ftmul@f2 000C               ___ftsub@f1 002C               ___ftsub@f2 002F  
             ___fttol@f1 0001           __pcstackCOMRAM 0001            __end_of_floor 0CB6  
          __end_of_frexp 114C                  ??_floor 0027                  ??_frexp 0005  
     __size_of_eval_poly 0096                  ?___ftge 0001                ?___altoft 0010  
              ?___ftpack 0001                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0074                  ___ftadd 085A                  _cos$738 004D  
                ___ftdiv 0AF6                  ___ftneg 11EE                  ___ftmul 0A02  
                ___ftsub 11AE                  ___fttol 0CB6             __psmallconst 0600  
             ??___altoft 0014                  __pcinit 1212               ??___ftpack 0006  
      __end_of_eval_poly 0F72                  _tan$740 0053                  _tan$741 0056  
                __ramtop 0600                  __ptext0 1224                  __ptext1 0E36  
                __ptext2 114C                  __ptext3 0F72                  __ptext4 061E  
                __ptext5 0BDC                  __ptext6 10E2                  __ptext7 0CB6  
                __ptext8 106E                  __ptext9 0FF6                  _sin$739 0043  
           __size_of_cos 0084             __size_of_tan 0062             __size_of_sin 023C  
   end_of_initialization 1216                  postdec2 000FDD                  postinc2 000FDE  
            ___ftdiv@exp 003B              ___ftmul@exp 0012           __end_of___ftge 10E2  
             floor@expon 002A      start_initialization 1212               eval_poly@d 0027  
             eval_poly@n 0028               eval_poly@x 0024              __end_of_cos 0FF6  
            __end_of_tan 11AE              __end_of_sin 085A               frexp@value 0001  
               ??___ftge 0007            ?_trigonometry 0001        __size_of___altoft 0078  
      __size_of___ftpack 00AE              __pbssCOMRAM 005C               sin@coeff_a 0601  
             sin@coeff_b 0610                 ?___ftadd 0018                 ?___ftdiv 002E  
               ?___ftneg 0001                 ?___ftmul 0009                 ?___ftsub 002C  
               ?___fttol 0001           ??_trigonometry 0059              __smallconst 0600  
              _eval_poly 0EDC           __size_of_floor 00DA           __size_of_frexp 006A  
             ?_eval_poly 0024                frexp@eptr 0004                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0600         __size_of___ftadd 01A8  
       __size_of___ftdiv 00E6         __size_of___ftneg 0024                 ___altoft 0FF6  
       __size_of___ftmul 00F4         __size_of___ftsub 0040         __size_of___fttol 00D2  
               ___ftpack 0D88                 __ptext10 0EDC                 __ptext11 0A02  
               __ptext12 11AE                 __ptext13 085A                 __ptext14 11EE  
               __ptext15 0AF6                 __ptext16 0D88     __end_of_trigonometry 0EDC  
          __size_of_main 0008              ??_eval_poly 002A  
