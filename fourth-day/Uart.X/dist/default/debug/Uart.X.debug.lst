

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Feb 26 09:34:20 2021

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4520 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     _RCREG	set	4014
    53  0000                     _TRISCbits	set	3988
    54  0000                     _SPBRG	set	4015
    55  0000                     _RCSTAbits	set	4011
    56  0000                     _TXSTAbits	set	4012
    57  0000                     _TXREG	set	4013
    58  0000                     _LATD	set	3980
    59  0000                     _PIR1bits	set	3998
    60  0000                     _TRMT	set	32097
    61                           
    62                           	psect	smallconst
    63  000600                     __psmallconst:
    64                           	opt callstack 0
    65  000600  00                 	db	0
    66  000601                     STR_1:
    67  000601  48                 	db	72	;'H'
    68  000602  65                 	db	101	;'e'
    69  000603  6C                 	db	108	;'l'
    70  000604  6C                 	db	108	;'l'
    71  000605  6F                 	db	111	;'o'
    72  000606  2C                 	db	44
    73  000607  20                 	db	32
    74  000608  57                 	db	87	;'W'
    75  000609  6F                 	db	111	;'o'
    76  00060A  72                 	db	114	;'r'
    77  00060B  6C                 	db	108	;'l'
    78  00060C  64                 	db	100	;'d'
    79  00060D  00                 	db	0
    80                           
    81                           ; #config settings
    82  00060E  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  000870                     __pcinit:
    86                           	opt callstack 0
    87  000870                     start_initialization:
    88                           	opt callstack 0
    89  000870                     __initialization:
    90                           	opt callstack 0
    91  000870                     end_of_initialization:
    92                           	opt callstack 0
    93  000870                     __end_of__initialization:
    94                           	opt callstack 0
    95  000870  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96  000872  6EF8               	movwf	tblptru,c
    97  000874  0E06               	movlw	high __Lsmallconst
    98  000876  6EF7               	movwf	tblptrh,c
    99  000878  0100               	movlb	0
   100  00087A  EFF5  F003         	goto	_main	;jump to C main() function
   101                           
   102                           	psect	cstackCOMRAM
   103  000001                     __pcstackCOMRAM:
   104                           	opt callstack 0
   105  000001                     ?___aldiv:
   106                           	opt callstack 0
   107  000001                     WriteToUart@data:
   108                           	opt callstack 0
   109  000001                     ___aldiv@dividend:
   110                           	opt callstack 0
   111                           
   112                           ; 4 bytes @ 0x0
   113  000001                     	ds	1
   114  000002                     WriteTextToUart@text:
   115                           	opt callstack 0
   116                           
   117                           ; 1 bytes @ 0x1
   118  000002                     	ds	1
   119  000003                     ??_WriteTextToUart:
   120                           
   121                           ; 1 bytes @ 0x2
   122  000003                     	ds	1
   123  000004                     WriteTextToUart@i:
   124                           	opt callstack 0
   125                           
   126                           ; 2 bytes @ 0x3
   127  000004                     	ds	1
   128  000005                     ___aldiv@divisor:
   129                           	opt callstack 0
   130                           
   131                           ; 4 bytes @ 0x4
   132  000005                     	ds	4
   133  000009                     ___aldiv@counter:
   134                           	opt callstack 0
   135                           
   136                           ; 1 bytes @ 0x8
   137  000009                     	ds	1
   138  00000A                     ___aldiv@sign:
   139                           	opt callstack 0
   140                           
   141                           ; 1 bytes @ 0x9
   142  00000A                     	ds	1
   143  00000B                     ___aldiv@quotient:
   144                           	opt callstack 0
   145                           
   146                           ; 4 bytes @ 0xA
   147  00000B                     	ds	4
   148  00000F                     InitializeUart@baudRate:
   149                           	opt callstack 0
   150                           
   151                           ; 4 bytes @ 0xE
   152  00000F                     	ds	4
   153  000013                     ??_InitializeUart:
   154                           
   155                           ; 1 bytes @ 0x12
   156  000013                     	ds	8
   157  00001B                     InitializeUart@x:
   158                           	opt callstack 0
   159                           
   160                           ; 2 bytes @ 0x1A
   161  00001B                     	ds	2
   162  00001D                     ??_main:
   163                           
   164                           ; 1 bytes @ 0x1C
   165  00001D                     	ds	1
   166  00001E                     main@initilizationResult:
   167                           	opt callstack 0
   168                           
   169                           ; 1 bytes @ 0x1D
   170  00001E                     	ds	1
   171  00001F                     main@received_char:
   172                           	opt callstack 0
   173                           
   174                           ; 1 bytes @ 0x1E
   175  00001F                     	ds	1
   176                           
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 12 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;  received_cha    1   30[COMRAM] volatile unsigned char 
   187 ;;  initilizatio    1   29[COMRAM] const unsigned char 
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   197 ;;      Params:         0       0       0       0       0       0       0
   198 ;;      Locals:         2       0       0       0       0       0       0
   199 ;;      Temps:          1       0       0       0       0       0       0
   200 ;;      Totals:         3       0       0       0       0       0       0
   201 ;;Total ram usage:        3 bytes
   202 ;; Hardware stack levels required when called:    2
   203 ;; This function calls:
   204 ;;		_InitializeUart
   205 ;;		_IsUartDataReady
   206 ;;		_ReadUartData
   207 ;;		_WriteTextToUart
   208 ;;		_WriteToUart
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           	psect	text0
   215  0007EA                     __ptext0:
   216                           	opt callstack 0
   217  0007EA                     _main:
   218                           	opt callstack 29
   219                           
   220                           ;main.c: 13: const char initilizationResult = InitializeUart(9600);
   221                           
   222                           ;incstack = 0
   223  0007EA  0E80               	movlw	128
   224  0007EC  6E0F               	movwf	InitializeUart@baudRate^0,c
   225  0007EE  0E25               	movlw	37
   226  0007F0  6E10               	movwf	(InitializeUart@baudRate+1)^0,c
   227  0007F2  0E00               	movlw	0
   228  0007F4  6E11               	movwf	(InitializeUart@baudRate+2)^0,c
   229  0007F6  0E00               	movlw	0
   230  0007F8  6E12               	movwf	(InitializeUart@baudRate+3)^0,c
   231  0007FA  EC08  F003         	call	_InitializeUart	;wreg free
   232  0007FE  6E1E               	movwf	main@initilizationResult^0,c
   233                           
   234                           ;main.c: 14: volatile char received_char;;main.c: 15: if (initilizationResult == 0) {
   235  000800  501E               	movf	main@initilizationResult^0,w,c
   236  000802  B4D8               	btfsc	status,2,c
   237  000804                     u320:
   238                           
   239                           ;main.c: 17: while(1);
   240  000804  D7FF               	goto	u320
   241                           
   242                           ;main.c: 18: };main.c: 20: WriteTextToUart("Hello, World");
   243  000806  0E01               	movlw	low STR_1
   244  000808  6E02               	movwf	WriteTextToUart@text^0,c
   245  00080A  EC1D  F004         	call	_WriteTextToUart	;wreg free
   246  00080E                     l1018:
   247                           
   248                           ;main.c: 22: if(IsUartDataReady()){
   249  00080E  EC45  F004         	call	_IsUartDataReady	;wreg free
   250  000812  0900               	iorlw	0
   251  000814  B4D8               	btfsc	status,2,c
   252  000816  D7FB               	goto	l1018
   253                           
   254                           ;main.c: 23: received_char = ReadUartData();
   255  000818  EC4B  F004         	call	_ReadUartData	;wreg free
   256  00081C  6E1F               	movwf	main@received_char^0,c	;volatile
   257                           
   258                           ;main.c: 24: PIR1bits.RCIF = 0;
   259  00081E  9A9E               	bcf	158,5,c	;volatile
   260                           
   261                           ;main.c: 25: _delay((unsigned long)((10)*(16000000/4000.0)));
   262  000820  0E34               	movlw	52
   263  000822  6E1D               	movwf	??_main^0,c
   264  000824  0EF2               	movlw	242
   265  000826                     u347:
   266  000826  2EE8               	decfsz	wreg,f,c
   267  000828  D7FE               	bra	u347
   268  00082A  2E1D               	decfsz	??_main^0,f,c
   269  00082C  D7FC               	bra	u347
   270                           
   271                           ;main.c: 26: LATD = received_char;
   272  00082E  C01F  FF8C         	movff	main@received_char,3980	;volatile
   273                           
   274                           ;main.c: 27: WriteToUart(received_char);
   275  000832  501F               	movf	main@received_char^0,w,c	;volatile
   276  000834  EC3F  F004         	call	_WriteToUart
   277  000838  D7EA               	goto	l1018
   278  00083A                     __end_of_main:
   279                           	opt callstack 0
   280                           
   281 ;; *************** function _WriteTextToUart *****************
   282 ;; Defined at:
   283 ;;		line 50 in file "UART.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;  text            1    1[COMRAM] PTR unsigned char 
   286 ;;		 -> STR_1(13), 
   287 ;; Auto vars:     Size  Location     Type
   288 ;;  i               2    3[COMRAM] int 
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   298 ;;      Params:         1       0       0       0       0       0       0
   299 ;;      Locals:         2       0       0       0       0       0       0
   300 ;;      Temps:          1       0       0       0       0       0       0
   301 ;;      Totals:         4       0       0       0       0       0       0
   302 ;;Total ram usage:        4 bytes
   303 ;; Hardware stack levels used:    1
   304 ;; Hardware stack levels required when called:    1
   305 ;; This function calls:
   306 ;;		_WriteToUart
   307 ;; This function is called by:
   308 ;;		_main
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           	psect	text1
   313  00083A                     __ptext1:
   314                           	opt callstack 0
   315  00083A                     _WriteTextToUart:
   316                           	opt callstack 29
   317                           
   318                           ;UART.c: 51: int i;;UART.c: 52: for(i=0;text[i]!='\0';i++)
   319                           
   320                           ;incstack = 0
   321  00083A  0E00               	movlw	0
   322  00083C  6E05               	movwf	(WriteTextToUart@i+1)^0,c
   323  00083E  0E00               	movlw	0
   324  000840  6E04               	movwf	WriteTextToUart@i^0,c
   325  000842  D00B               	goto	l1010
   326  000844                     l1006:
   327                           
   328                           ;UART.c: 53: WriteToUart(text[i]);
   329  000844  5002               	movf	WriteTextToUart@text^0,w,c
   330  000846  2404               	addwf	WriteTextToUart@i^0,w,c
   331  000848  6E03               	movwf	??_WriteTextToUart^0,c
   332  00084A  C003  FFF6         	movff	??_WriteTextToUart,tblptrl
   333  00084E                     	if	0	;There is only one active tblptr byte
   334  00084E                     	endif
   335  00084E                     	if	0	;tblptru may be non-zero
   336  00084E                     	endif
   337  00084E                     	if	0	;tblptru may be non-zero
   338  00084E                     	endif
   339  00084E  0008               	tblrd		*
   340  000850  50F5               	movf	tablat,w,c
   341  000852  EC3F  F004         	call	_WriteToUart
   342  000856  4A04               	infsnz	WriteTextToUart@i^0,f,c
   343  000858  2A05               	incf	(WriteTextToUart@i+1)^0,f,c
   344  00085A                     l1010:
   345  00085A  5002               	movf	WriteTextToUart@text^0,w,c
   346  00085C  2404               	addwf	WriteTextToUart@i^0,w,c
   347  00085E  6E03               	movwf	??_WriteTextToUart^0,c
   348  000860  C003  FFF6         	movff	??_WriteTextToUart,tblptrl
   349  000864                     	if	0	;There is only one active tblptr byte
   350  000864                     	endif
   351  000864                     	if	0	;tblptru may be non-zero
   352  000864                     	endif
   353  000864                     	if	0	;tblptru may be non-zero
   354  000864                     	endif
   355  000864  0008               	tblrd		*
   356  000866  50F5               	movf	tablat,w,c
   357  000868  0900               	iorlw	0
   358  00086A  B4D8               	btfsc	status,2,c
   359  00086C  0012               	return	
   360  00086E  D7EA               	goto	l1006
   361  000870                     __end_of_WriteTextToUart:
   362                           	opt callstack 0
   363                           
   364 ;; *************** function _WriteToUart *****************
   365 ;; Defined at:
   366 ;;		line 39 in file "UART.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;  data            1    wreg     unsigned char 
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  data            1    0[COMRAM] unsigned char 
   371 ;; Return value:  Size  Location     Type
   372 ;;                  1    wreg      void 
   373 ;; Registers used:
   374 ;;		wreg
   375 ;; Tracked objects:
   376 ;;		On entry : 0/0
   377 ;;		On exit  : 0/0
   378 ;;		Unchanged: 0/0
   379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   380 ;;      Params:         0       0       0       0       0       0       0
   381 ;;      Locals:         1       0       0       0       0       0       0
   382 ;;      Temps:          0       0       0       0       0       0       0
   383 ;;      Totals:         1       0       0       0       0       0       0
   384 ;;Total ram usage:        1 bytes
   385 ;; Hardware stack levels used:    1
   386 ;; This function calls:
   387 ;;		Nothing
   388 ;; This function is called by:
   389 ;;		_main
   390 ;;		_WriteTextToUart
   391 ;; This function uses a non-reentrant model
   392 ;;
   393                           
   394                           	psect	text2
   395  00087E                     __ptext2:
   396                           	opt callstack 0
   397  00087E                     _WriteToUart:
   398                           	opt callstack 30
   399                           
   400                           ;incstack = 0
   401                           ;WriteToUart@data stored from wreg
   402  00087E  6E01               	movwf	WriteToUart@data^0,c
   403  000880                     
   404                           ;UART.c: 40: while(!TRMT);
   405  000880  A2AC               	btfss	4012,1,c	;volatile
   406  000882  D7FE               	goto	l836
   407                           
   408                           ;UART.c: 41: TXREG = data;
   409  000884  C001  FFAD         	movff	WriteToUart@data,4013	;volatile
   410  000888  0012               	return		;funcret
   411  00088A                     __end_of_WriteToUart:
   412                           	opt callstack 0
   413                           
   414 ;; *************** function _ReadUartData *****************
   415 ;; Defined at:
   416 ;;		line 66 in file "UART.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;		None
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      unsigned char 
   423 ;; Registers used:
   424 ;;		wreg, status,2
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   430 ;;      Params:         0       0       0       0       0       0       0
   431 ;;      Locals:         0       0       0       0       0       0       0
   432 ;;      Temps:          0       0       0       0       0       0       0
   433 ;;      Totals:         0       0       0       0       0       0       0
   434 ;;Total ram usage:        0 bytes
   435 ;; Hardware stack levels used:    1
   436 ;; This function calls:
   437 ;;		Nothing
   438 ;; This function is called by:
   439 ;;		_main
   440 ;; This function uses a non-reentrant model
   441 ;;
   442                           
   443                           	psect	text3
   444  000896                     __ptext3:
   445                           	opt callstack 0
   446  000896                     _ReadUartData:
   447                           	opt callstack 30
   448                           
   449                           ;UART.c: 67: while(!PIR1bits.RCIF);
   450                           
   451                           ;incstack = 0
   452  000896  AA9E               	btfss	158,5,c	;volatile
   453  000898  D7FE               	goto	_ReadUartData
   454                           
   455                           ;UART.c: 68: return RCREG;
   456  00089A  50AE               	movf	174,w,c	;volatile
   457  00089C  0012               	return		;funcret
   458  00089E                     __end_of_ReadUartData:
   459                           	opt callstack 0
   460                           
   461 ;; *************** function _IsUartDataReady *****************
   462 ;; Defined at:
   463 ;;		line 60 in file "UART.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;		None
   466 ;; Auto vars:     Size  Location     Type
   467 ;;		None
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      unsigned char 
   470 ;; Registers used:
   471 ;;		wreg
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   477 ;;      Params:         0       0       0       0       0       0       0
   478 ;;      Locals:         0       0       0       0       0       0       0
   479 ;;      Temps:          0       0       0       0       0       0       0
   480 ;;      Totals:         0       0       0       0       0       0       0
   481 ;;Total ram usage:        0 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; This function calls:
   484 ;;		Nothing
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text4
   491  00088A                     __ptext4:
   492                           	opt callstack 0
   493  00088A                     _IsUartDataReady:
   494                           	opt callstack 30
   495                           
   496                           ;UART.c: 61: return PIR1bits.RCIF;
   497                           
   498                           ;incstack = 0
   499  00088A  AA9E               	btfss	158,5,c	;volatile
   500  00088C  D002               	goto	u150
   501  00088E  0E01               	movlw	1
   502  000890  0012               	return	
   503  000892                     u150:
   504  000892  0E00               	movlw	0
   505  000894  0012               	return		;funcret
   506  000896                     __end_of_IsUartDataReady:
   507                           	opt callstack 0
   508                           
   509 ;; *************** function _InitializeUart *****************
   510 ;; Defined at:
   511 ;;		line 11 in file "UART.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  baudRate        4   14[COMRAM] const long 
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  x               2   26[COMRAM] unsigned int 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      unsigned char 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   525 ;;      Params:         4       0       0       0       0       0       0
   526 ;;      Locals:         2       0       0       0       0       0       0
   527 ;;      Temps:          8       0       0       0       0       0       0
   528 ;;      Totals:        14       0       0       0       0       0       0
   529 ;;Total ram usage:       14 bytes
   530 ;; Hardware stack levels used:    1
   531 ;; Hardware stack levels required when called:    1
   532 ;; This function calls:
   533 ;;		___aldiv
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text5
   540  000610                     __ptext5:
   541                           	opt callstack 0
   542  000610                     _InitializeUart:
   543                           	opt callstack 29
   544                           
   545                           ;UART.c: 12: unsigned int x = (16000000 - baudRate * 64) / (baudRate * 64);
   546                           
   547                           ;incstack = 0
   548  000610  C00F  F013         	movff	InitializeUart@baudRate,??_InitializeUart
   549  000614  C010  F014         	movff	InitializeUart@baudRate+1,??_InitializeUart+1
   550  000618  C011  F015         	movff	InitializeUart@baudRate+2,??_InitializeUart+2
   551  00061C  C012  F016         	movff	InitializeUart@baudRate+3,??_InitializeUart+3
   552  000620  0E06               	movlw	6
   553  000622                     u255:
   554  000622  90D8               	bcf	status,0,c
   555  000624  3613               	rlcf	??_InitializeUart^0,f,c
   556  000626  3614               	rlcf	(??_InitializeUart+1)^0,f,c
   557  000628  3615               	rlcf	(??_InitializeUart+2)^0,f,c
   558  00062A  3616               	rlcf	(??_InitializeUart+3)^0,f,c
   559  00062C  2EE8               	decfsz	wreg,f,c
   560  00062E  D7F9               	goto	u255
   561  000630  5013               	movf	??_InitializeUart^0,w,c
   562  000632  0800               	sublw	0
   563  000634  6E01               	movwf	___aldiv@dividend^0,c
   564  000636  0E24               	movlw	36
   565  000638  5414               	subfwb	(??_InitializeUart+1)^0,w,c
   566  00063A  6E02               	movwf	(___aldiv@dividend+1)^0,c
   567  00063C  0EF4               	movlw	244
   568  00063E  5415               	subfwb	(??_InitializeUart+2)^0,w,c
   569  000640  6E03               	movwf	(___aldiv@dividend+2)^0,c
   570  000642  0E00               	movlw	0
   571  000644  5416               	subfwb	(??_InitializeUart+3)^0,w,c
   572  000646  6E04               	movwf	(___aldiv@dividend+3)^0,c
   573  000648  C00F  F017         	movff	InitializeUart@baudRate,??_InitializeUart+4
   574  00064C  C010  F018         	movff	InitializeUart@baudRate+1,??_InitializeUart+5
   575  000650  C011  F019         	movff	InitializeUart@baudRate+2,??_InitializeUart+6
   576  000654  C012  F01A         	movff	InitializeUart@baudRate+3,??_InitializeUart+7
   577  000658  0E06               	movlw	6
   578  00065A                     u265:
   579  00065A  90D8               	bcf	status,0,c
   580  00065C  3617               	rlcf	(??_InitializeUart+4)^0,f,c
   581  00065E  3618               	rlcf	(??_InitializeUart+5)^0,f,c
   582  000660  3619               	rlcf	(??_InitializeUart+6)^0,f,c
   583  000662  361A               	rlcf	(??_InitializeUart+7)^0,f,c
   584  000664  2EE8               	decfsz	wreg,f,c
   585  000666  D7F9               	goto	u265
   586  000668  C017  F005         	movff	??_InitializeUart+4,___aldiv@divisor
   587  00066C  C018  F006         	movff	??_InitializeUart+5,___aldiv@divisor+1
   588  000670  C019  F007         	movff	??_InitializeUart+6,___aldiv@divisor+2
   589  000674  C01A  F008         	movff	??_InitializeUart+7,___aldiv@divisor+3
   590  000678  EC8F  F003         	call	___aldiv	;wreg free
   591  00067C  C001  F01B         	movff	?___aldiv,InitializeUart@x
   592  000680  C002  F01C         	movff	?___aldiv+1,InitializeUart@x+1
   593                           
   594                           ;UART.c: 13: if (x > 255)
   595  000684  041C               	decf	(InitializeUart@x+1)^0,w,c
   596  000686  A0D8               	btfss	status,0,c
   597  000688  D03B               	goto	l992
   598                           
   599                           ;UART.c: 14: {;UART.c: 18: x = (16000000 - baudRate * 16) / (baudRate * 16);
   600  00068A  C00F  F013         	movff	InitializeUart@baudRate,??_InitializeUart
   601  00068E  C010  F014         	movff	InitializeUart@baudRate+1,??_InitializeUart+1
   602  000692  C011  F015         	movff	InitializeUart@baudRate+2,??_InitializeUart+2
   603  000696  C012  F016         	movff	InitializeUart@baudRate+3,??_InitializeUart+3
   604  00069A  0E04               	movlw	4
   605  00069C                     u285:
   606  00069C  90D8               	bcf	status,0,c
   607  00069E  3613               	rlcf	??_InitializeUart^0,f,c
   608  0006A0  3614               	rlcf	(??_InitializeUart+1)^0,f,c
   609  0006A2  3615               	rlcf	(??_InitializeUart+2)^0,f,c
   610  0006A4  3616               	rlcf	(??_InitializeUart+3)^0,f,c
   611  0006A6  2EE8               	decfsz	wreg,f,c
   612  0006A8  D7F9               	goto	u285
   613  0006AA  5013               	movf	??_InitializeUart^0,w,c
   614  0006AC  0800               	sublw	0
   615  0006AE  6E01               	movwf	___aldiv@dividend^0,c
   616  0006B0  0E24               	movlw	36
   617  0006B2  5414               	subfwb	(??_InitializeUart+1)^0,w,c
   618  0006B4  6E02               	movwf	(___aldiv@dividend+1)^0,c
   619  0006B6  0EF4               	movlw	244
   620  0006B8  5415               	subfwb	(??_InitializeUart+2)^0,w,c
   621  0006BA  6E03               	movwf	(___aldiv@dividend+2)^0,c
   622  0006BC  0E00               	movlw	0
   623  0006BE  5416               	subfwb	(??_InitializeUart+3)^0,w,c
   624  0006C0  6E04               	movwf	(___aldiv@dividend+3)^0,c
   625  0006C2  C00F  F017         	movff	InitializeUart@baudRate,??_InitializeUart+4
   626  0006C6  C010  F018         	movff	InitializeUart@baudRate+1,??_InitializeUart+5
   627  0006CA  C011  F019         	movff	InitializeUart@baudRate+2,??_InitializeUart+6
   628  0006CE  C012  F01A         	movff	InitializeUart@baudRate+3,??_InitializeUart+7
   629  0006D2  0E04               	movlw	4
   630  0006D4                     u295:
   631  0006D4  90D8               	bcf	status,0,c
   632  0006D6  3617               	rlcf	(??_InitializeUart+4)^0,f,c
   633  0006D8  3618               	rlcf	(??_InitializeUart+5)^0,f,c
   634  0006DA  3619               	rlcf	(??_InitializeUart+6)^0,f,c
   635  0006DC  361A               	rlcf	(??_InitializeUart+7)^0,f,c
   636  0006DE  2EE8               	decfsz	wreg,f,c
   637  0006E0  D7F9               	goto	u295
   638  0006E2  C017  F005         	movff	??_InitializeUart+4,___aldiv@divisor
   639  0006E6  C018  F006         	movff	??_InitializeUart+5,___aldiv@divisor+1
   640  0006EA  C019  F007         	movff	??_InitializeUart+6,___aldiv@divisor+2
   641  0006EE  C01A  F008         	movff	??_InitializeUart+7,___aldiv@divisor+3
   642  0006F2  EC8F  F003         	call	___aldiv	;wreg free
   643  0006F6  C001  F01B         	movff	?___aldiv,InitializeUart@x
   644  0006FA  C002  F01C         	movff	?___aldiv+1,InitializeUart@x+1
   645                           
   646                           ;UART.c: 19: TXSTAbits.BRGH = 1;
   647  0006FE  84AC               	bsf	172,2,c	;volatile
   648  000700                     l992:
   649                           
   650                           ;UART.c: 20: };UART.c: 21: if (x < 256) {
   651  000700  041C               	decf	(InitializeUart@x+1)^0,w,c
   652  000702  B0D8               	btfsc	status,0,c
   653  000704  D00A               	goto	l1000
   654                           
   655                           ;UART.c: 22: RCSTAbits.SPEN = 1;
   656  000706  8EAB               	bsf	171,7,c	;volatile
   657                           
   658                           ;UART.c: 23: RCSTAbits.CREN = 1;
   659  000708  88AB               	bsf	171,4,c	;volatile
   660                           
   661                           ;UART.c: 25: TXSTAbits.SYNC = 0;
   662  00070A  98AC               	bcf	172,4,c	;volatile
   663                           
   664                           ;UART.c: 26: TXSTAbits.TXEN = 1;
   665  00070C  8AAC               	bsf	172,5,c	;volatile
   666                           
   667                           ;UART.c: 28: SPBRG = x;
   668  00070E  C01B  FFAF         	movff	InitializeUart@x,4015	;volatile
   669                           
   670                           ;UART.c: 30: TRISCbits.RC7 = 1;
   671  000712  8E94               	bsf	148,7,c	;volatile
   672                           
   673                           ;UART.c: 31: TRISCbits.RC6 = 1;
   674  000714  8C94               	bsf	148,6,c	;volatile
   675                           
   676                           ;UART.c: 32: return 1;
   677  000716  0E01               	movlw	1
   678  000718  0012               	return	
   679  00071A                     l1000:
   680                           
   681                           ;UART.c: 33: };UART.c: 34: return 0;
   682  00071A  0E00               	movlw	0
   683  00071C  0012               	return		;funcret
   684  00071E                     __end_of_InitializeUart:
   685                           	opt callstack 0
   686                           
   687 ;; *************** function ___aldiv *****************
   688 ;; Defined at:
   689 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  dividend        4    0[COMRAM] long 
   692 ;;  divisor         4    4[COMRAM] long 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  quotient        4   10[COMRAM] long 
   695 ;;  sign            1    9[COMRAM] unsigned char 
   696 ;;  counter         1    8[COMRAM] unsigned char 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  4    0[COMRAM] long 
   699 ;; Registers used:
   700 ;;		wreg, status,2, status,0
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   706 ;;      Params:         8       0       0       0       0       0       0
   707 ;;      Locals:         6       0       0       0       0       0       0
   708 ;;      Temps:          0       0       0       0       0       0       0
   709 ;;      Totals:        14       0       0       0       0       0       0
   710 ;;Total ram usage:       14 bytes
   711 ;; Hardware stack levels used:    1
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_InitializeUart
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text6
   720  00071E                     __ptext6:
   721                           	opt callstack 0
   722  00071E                     ___aldiv:
   723                           	opt callstack 29
   724                           
   725                           ;incstack = 0
   726  00071E  0E00               	movlw	0
   727  000720  6E0A               	movwf	___aldiv@sign^0,c
   728  000722  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   729  000724  D00A               	goto	l948
   730  000726  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   731  000728  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   732  00072A  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   733  00072C  6C05               	negf	___aldiv@divisor^0,c
   734  00072E  0E00               	movlw	0
   735  000730  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   736  000732  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   737  000734  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   738  000736  0E01               	movlw	1
   739  000738  6E0A               	movwf	___aldiv@sign^0,c
   740  00073A                     l948:
   741  00073A  AE04               	btfss	(___aldiv@dividend+3)^0,7,c
   742  00073C  D00A               	goto	l954
   743  00073E  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   744  000740  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   745  000742  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   746  000744  6C01               	negf	___aldiv@dividend^0,c
   747  000746  0E00               	movlw	0
   748  000748  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   749  00074A  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   750  00074C  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   751  00074E  0E01               	movlw	1
   752  000750  1A0A               	xorwf	___aldiv@sign^0,f,c
   753  000752                     l954:
   754  000752  0E00               	movlw	0
   755  000754  6E0B               	movwf	___aldiv@quotient^0,c
   756  000756  0E00               	movlw	0
   757  000758  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   758  00075A  0E00               	movlw	0
   759  00075C  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   760  00075E  0E00               	movlw	0
   761  000760  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   762  000762  5005               	movf	___aldiv@divisor^0,w,c
   763  000764  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   764  000766  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   765  000768  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   766  00076A  B4D8               	btfsc	status,2,c
   767  00076C  D02A               	goto	l976
   768  00076E  0E01               	movlw	1
   769  000770  6E09               	movwf	___aldiv@counter^0,c
   770  000772  D006               	goto	l962
   771  000774                     l960:
   772  000774  90D8               	bcf	status,0,c
   773  000776  3605               	rlcf	___aldiv@divisor^0,f,c
   774  000778  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   775  00077A  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   776  00077C  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   777  00077E  2A09               	incf	___aldiv@counter^0,f,c
   778  000780                     l962:
   779  000780  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   780  000782  D7F8               	goto	l960
   781  000784                     u220:
   782  000784  90D8               	bcf	status,0,c
   783  000786  360B               	rlcf	___aldiv@quotient^0,f,c
   784  000788  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   785  00078A  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   786  00078C  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   787  00078E  5005               	movf	___aldiv@divisor^0,w,c
   788  000790  5C01               	subwf	___aldiv@dividend^0,w,c
   789  000792  5006               	movf	(___aldiv@divisor+1)^0,w,c
   790  000794  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   791  000796  5007               	movf	(___aldiv@divisor+2)^0,w,c
   792  000798  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   793  00079A  5008               	movf	(___aldiv@divisor+3)^0,w,c
   794  00079C  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   795  00079E  A0D8               	btfss	status,0,c
   796  0007A0  D009               	goto	l972
   797  0007A2  5005               	movf	___aldiv@divisor^0,w,c
   798  0007A4  5E01               	subwf	___aldiv@dividend^0,f,c
   799  0007A6  5006               	movf	(___aldiv@divisor+1)^0,w,c
   800  0007A8  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   801  0007AA  5007               	movf	(___aldiv@divisor+2)^0,w,c
   802  0007AC  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   803  0007AE  5008               	movf	(___aldiv@divisor+3)^0,w,c
   804  0007B0  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   805  0007B2  800B               	bsf	___aldiv@quotient^0,0,c
   806  0007B4                     l972:
   807  0007B4  90D8               	bcf	status,0,c
   808  0007B6  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   809  0007B8  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   810  0007BA  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   811  0007BC  3205               	rrcf	___aldiv@divisor^0,f,c
   812  0007BE  2E09               	decfsz	___aldiv@counter^0,f,c
   813  0007C0  D7E1               	goto	u220
   814  0007C2                     l976:
   815  0007C2  500A               	movf	___aldiv@sign^0,w,c
   816  0007C4  B4D8               	btfsc	status,2,c
   817  0007C6  D008               	goto	l980
   818  0007C8  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   819  0007CA  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   820  0007CC  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   821  0007CE  6C0B               	negf	___aldiv@quotient^0,c
   822  0007D0  0E00               	movlw	0
   823  0007D2  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   824  0007D4  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   825  0007D6  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   826  0007D8                     l980:
   827  0007D8  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   828  0007DC  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   829  0007E0  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   830  0007E4  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   831  0007E8  0012               	return		;funcret
   832  0007EA                     __end_of___aldiv:
   833                           	opt callstack 0
   834                           
   835                           	psect	rparam
   836  0000                     tosu	equ	0xFFF
   837                           tosh	equ	0xFFE
   838                           tosl	equ	0xFFD
   839                           stkptr	equ	0xFFC
   840                           pclatu	equ	0xFFB
   841                           pclath	equ	0xFFA
   842                           pcl	equ	0xFF9
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           prodh	equ	0xFF4
   848                           prodl	equ	0xFF3
   849                           indf0	equ	0xFEF
   850                           postinc0	equ	0xFEE
   851                           postdec0	equ	0xFED
   852                           preinc0	equ	0xFEC
   853                           plusw0	equ	0xFEB
   854                           fsr0h	equ	0xFEA
   855                           fsr0l	equ	0xFE9
   856                           wreg	equ	0xFE8
   857                           indf1	equ	0xFE7
   858                           postinc1	equ	0xFE6
   859                           postdec1	equ	0xFE5
   860                           preinc1	equ	0xFE4
   861                           plusw1	equ	0xFE3
   862                           fsr1h	equ	0xFE2
   863                           fsr1l	equ	0xFE1
   864                           bsr	equ	0xFE0
   865                           indf2	equ	0xFDF
   866                           postinc2	equ	0xFDE
   867                           postdec2	equ	0xFDD
   868                           preinc2	equ	0xFDC
   869                           plusw2	equ	0xFDB
   870                           fsr2h	equ	0xFDA
   871                           fsr2l	equ	0xFD9
   872                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     31      31
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    WriteTextToUart@text	PTR unsigned char  size(1) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_InitializeUart
    _WriteTextToUart->_WriteToUart
    _InitializeUart->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1100
                                             28 COMRAM     3     3      0
                     _InitializeUart
                    _IsUartDataReady
                       _ReadUartData
                    _WriteTextToUart
                        _WriteToUart
 ---------------------------------------------------------------------------------
 (1) _WriteTextToUart                                      4     3      1     181
                                              1 COMRAM     4     3      1
                        _WriteToUart
 ---------------------------------------------------------------------------------
 (1) _WriteToUart                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadUartData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IsUartDataReady                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeUart                                      14    10      4     836
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeUart
     ___aldiv
   _IsUartDataReady
   _ReadUartData
   _WriteTextToUart
     _WriteToUart
   _WriteToUart

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     1F      1F       1       24.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Feb 26 09:34:20 2021

             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000               __CFG_OSC$XT 000000  
                     l836 0880                       l960 0774                       l962 0780  
                     l954 0752                       l980 07D8                       l972 07B4  
                     l948 073A                       l976 07C2                       l992 0700  
            __CFG_CPB$OFF 000000                       u220 0784                       u150 0892  
                     u320 0804                       u255 0622                       u265 065A  
            __CFG_CPD$OFF 000000                       u347 0826                       u285 069C  
                     u295 06D4      __size_of_WriteToUart 000C                       wreg 000FE8  
            __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000                      l1000 071A  
                    l1010 085A                      l1006 0844                      l1018 080E  
                    STR_1 0601                      _LATD 000F8C                      _TRMT 007D61  
                    _main 07EA                      start 0000             __CFG_IESO$OFF 000000  
           __CFG_MCLRE$ON 000000              ___param_bank 000000          ?_WriteTextToUart 0002  
__size_of_IsUartDataReady 000C           __end_of___aldiv 07EA                     ?_main 0001  
           ?_ReadUartData 0001                     _RCREG 000FAE                     _SPBRG 000FAF  
                   _TXREG 000FAD             __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000             __CFG_WRTB$OFF 000000  
           __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000  
          __CFG_BOREN$OFF 000000                     tablat 000FF5                     status 000FD8  
         __initialization 0870              __end_of_main 083A   __size_of_InitializeUart 010E  
                  ??_main 001D            ??_ReadUartData 0001             __activetblptr 000001  
       main@received_char 001F            __CFG_XINST$OFF 000000                 ??___aldiv 0009  
          __CFG_STVREN$ON 000000         ??_IsUartDataReady 0001              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0080   __end_of__initialization 0870           __CFG_PBADEN$OFF 000000  
           ___rparam_used 000001            __pcstackCOMRAM 0001      __end_of_ReadUartData 089E  
          _InitializeUart 0610             ??_WriteToUart 0001    __end_of_InitializeUart 071E  
                 __Hparam 0000                   __Lparam 0000                   ___aldiv 071E  
            __psmallconst 0600                   __pcinit 0870                   __ramtop 0600  
                 __ptext0 07EA                   __ptext1 083A                   __ptext2 087E  
                 __ptext3 0896                   __ptext4 088A                   __ptext5 0610  
                 __ptext6 071E  __size_of_WriteTextToUart 0036           InitializeUart@x 001B  
        ___aldiv@dividend 0001       __end_of_WriteToUart 088A      end_of_initialization 0870  
        WriteTextToUart@i 0004           ?_InitializeUart 000F                 _RCSTAbits 000FAB  
        ___aldiv@quotient 000B           _IsUartDataReady 088A                 _TRISCbits 000F94  
   __size_of_ReadUartData 0008                 _TXSTAbits 000FAC               _WriteToUart 087E  
            _ReadUartData 0896       WriteTextToUart@text 0002       start_initialization 0870  
       ??_WriteTextToUart 0003   __end_of_IsUartDataReady 0896          __CFG_LPT1OSC$OFF 000000  
         WriteToUart@data 0001         __CFG_CCP2MX$PORTC 000000                  ?___aldiv 0001  
             __smallconst 0600          ??_InitializeUart 0013           ___aldiv@divisor 0005  
         ___aldiv@counter 0009          ?_IsUartDataReady 0001                  _PIR1bits 000F9E  
        __CFG_WDTPS$32768 000000    InitializeUart@baudRate 000F                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0600          __size_of___aldiv 00CC  
            ?_WriteToUart 0001           _WriteTextToUart 083A             __size_of_main 0050  
 main@initilizationResult 001E   __end_of_WriteTextToUart 0870              ___aldiv@sign 000A  
